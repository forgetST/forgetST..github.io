<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>勿忘，须舍</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forgetst.github.io/"/>
  <updated>2022-11-19T16:00:00.000Z</updated>
  <id>https://forgetst.github.io/</id>
  
  <author>
    <name>Mr Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Excel中xlwings库使用</title>
    <link href="https://forgetst.github.io/python/excel%E4%B8%ADxlwings%E5%BA%93%E4%BD%BF%E7%94%A8.html"/>
    <id>https://forgetst.github.io/python/excel中xlwings库使用.html</id>
    <published>2022-11-19T16:00:00.000Z</published>
    <updated>2022-11-19T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot; title=&quot;install&quot;&gt;&lt;/a&gt;install&lt;/h2&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install xlwings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xlwings addin install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;update&quot;&gt;&lt;a href=&quot;#update&quot; class=&quot;headerlink&quot; title=&quot;update&quot;&gt;&lt;/a&gt;update&lt;/h2&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install --upgrade xlwings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Uninstall&quot;&gt;&lt;a href=&quot;#Uninstall&quot; class=&quot;headerlink&quot; title=&quot;Uninstall&quot;&gt;&lt;/a&gt;Uninstall&lt;/h2&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xlwings addin remove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip uninstall xlwings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;文档：&lt;a href=&quot;https://docs.xlwings.org/en/stable/installation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.xlwings.org/en/stable/installation.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://forgetst.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://forgetst.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解决broker挂掉时celery卡死的问题</title>
    <link href="https://forgetst.github.io/celery/%E8%A7%A3%E5%86%B3broker%E6%8C%82%E6%8E%89%E6%97%B6celery%E5%8D%A1%E6%AD%BB%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>https://forgetst.github.io/celery/解决broker挂掉时celery卡死的问题.html</id>
    <published>2021-03-22T16:00:00.000Z</published>
    <updated>2021-03-22T16:00:00.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="celery" scheme="https://forgetst.github.io/categories/celery/"/>
    
    
      <category term="python" scheme="https://forgetst.github.io/tags/python/"/>
    
      <category term="celery" scheme="https://forgetst.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>TCP三次握手、四次挥手过程及原理</title>
    <link href="https://forgetst.github.io/tcp/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%8E%9F%E7%90%86.html"/>
    <id>https://forgetst.github.io/tcp/tcp三次握手、四次挥手过程及原理.html</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-21T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-协议简述&quot;&gt;&lt;a href=&quot;#TCP-协议简述&quot; class=&quot;headerlink&quot; title=&quot;TCP 协议简述&quot;&gt;&lt;/a&gt;TCP 协议简述&lt;/h2&gt;&lt;p&gt;TCP 提供面向有连接的通信传输，面向有连接是指在传送数据之前必须先建立连接，数据传送完成后要释放连接。&lt;br&gt;无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。&lt;br&gt;同时由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式，所以需要四次挥手关闭连接。&lt;/p&gt;
    
    </summary>
    
      <category term="tcp" scheme="https://forgetst.github.io/categories/tcp/"/>
    
    
      <category term="tcp" scheme="https://forgetst.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>mysql explain使用</title>
    <link href="https://forgetst.github.io/mysql/mysql-explain%E4%BD%BF%E7%94%A8.html"/>
    <id>https://forgetst.github.io/mysql/mysql-explain使用.html</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-21T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;explain模拟优化器执行SQL语句，在5.6以及以后的版本中，除过select，其他比如insert，update和delete均可以使用explain查看执行计划，从而知道mysql是如何处理sql语句，分析查询语句或者表结构的性能瓶颈。作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表的读取顺序&lt;/li&gt;
&lt;li&gt;数据读取操作的操作类型&lt;/li&gt;
&lt;li&gt;哪些索引可以使用&lt;/li&gt;
&lt;li&gt;哪些索引被实际使用&lt;/li&gt;
&lt;li&gt;表之间的引用&lt;/li&gt;
&lt;li&gt;每张表有多少行被优化器查询&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://forgetst.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://forgetst.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>golang常用库：字段参数验证库-validator使用</title>
    <link href="https://forgetst.github.io/go/golang%E5%B8%B8%E7%94%A8%E5%BA%93%EF%BC%9A%E5%AD%97%E6%AE%B5%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81%E5%BA%93-validator%E4%BD%BF%E7%94%A8.html"/>
    <id>https://forgetst.github.io/go/golang常用库：字段参数验证库-validator使用.html</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-05T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在平常开发中，特别是在web应用开发中，为了验证输入字段的合法性，都会做一些验证操作。比如对用户提交的表单字段进行验证，或者对请求的API接口字段进行验证，验证字段的合法性，保证输入字段值的安全，防止用户的恶意请求。&lt;/p&gt;
&lt;p&gt;一般的做法是用正则表达式，一个字段一个字段的进行验证。一个一个字段验证的话，写起来比较繁琐。那有没更好的方法，进行字段的合法性验证？有， 这就是下面要介绍的 validator 这个验证组件。&lt;/p&gt;
&lt;p&gt;代码地址：&lt;br&gt;&lt;a href=&quot;https://github.com/go-playground/validator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/go-playground/validator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档地址：&lt;br&gt;&lt;a href=&quot;https://github.com/go-playground/validator/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/go-playground/validator/blob/master/README.md&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang beego使用记录</title>
    <link href="https://forgetst.github.io/go/beego/golang-beego%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://forgetst.github.io/go/beego/golang-beego使用记录.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-04T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;beego-简介&quot;&gt;&lt;a href=&quot;#beego-简介&quot; class=&quot;headerlink&quot; title=&quot;beego 简介&quot;&gt;&lt;/a&gt;beego 简介&lt;/h2&gt;&lt;p&gt;beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="beego" scheme="https://forgetst.github.io/categories/go/beego/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
      <category term="beego" scheme="https://forgetst.github.io/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>golang uuid使用</title>
    <link href="https://forgetst.github.io/go/package/uuid/golang-uuid%E4%BD%BF%E7%94%A8.html"/>
    <id>https://forgetst.github.io/go/package/uuid/golang-uuid使用.html</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-02-27T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;uuid是Universally Unique Identifier的缩写，即通用唯一识别码。&lt;/p&gt;
&lt;p&gt;uuid的目的是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的 uuid。&lt;br&gt;A universally unique identifier (UUID) is a 128-bit number used to identify information in computer systems。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="package" scheme="https://forgetst.github.io/categories/go/package/"/>
    
      <category term="uuid" scheme="https://forgetst.github.io/categories/go/package/uuid/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
      <category term="package" scheme="https://forgetst.github.io/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>golang logrus日志处理</title>
    <link href="https://forgetst.github.io/go/logrus/golang-logrus%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86.html"/>
    <id>https://forgetst.github.io/go/logrus/golang-logrus日志处理.html</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-25T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;logrus介绍&quot;&gt;&lt;a href=&quot;#logrus介绍&quot; class=&quot;headerlink&quot; title=&quot;logrus介绍&quot;&gt;&lt;/a&gt;logrus介绍&lt;/h2&gt;&lt;p&gt;Logrus是Go（golang）的结构化logger，与标准库logger完全API兼容。它有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完全兼容标准日志库，拥有七种日志级别：&lt;code&gt;Trace&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt; 和 &lt;code&gt;Panic&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可扩展的Hook机制，允许使用者通过Hook的方式将日志分发到任意地方，如本地文件系统，logstash，elasticsearch或者mq等，或者通过Hook定义日志内容和格式等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可选的日志输出格式，内置了两种日志格式JSONFormater和TextFormatter，还可以自定义日志格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Field机制，通过Filed机制进行结构化的日志记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="logrus" scheme="https://forgetst.github.io/categories/go/logrus/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 杂记</title>
    <link href="https://forgetst.github.io/go/golang-%E6%9D%82%E8%AE%B0.html"/>
    <id>https://forgetst.github.io/go/golang-杂记.html</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-25T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;用于记录golang开发中的常见示例。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang gin使用记录</title>
    <link href="https://forgetst.github.io/go/gin/golang-gin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://forgetst.github.io/go/gin/golang-gin使用记录.html</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2021-02-24T16:00:00.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="gin" scheme="https://forgetst.github.io/categories/go/gin/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 常见panic处理</title>
    <link href="https://forgetst.github.io/go/panic/golang-%E5%B8%B8%E8%A7%81panic%E5%A4%84%E7%90%86.html"/>
    <id>https://forgetst.github.io/go/panic/golang-常见panic处理.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-22T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;记录golang常见panic及处理。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="panic" scheme="https://forgetst.github.io/categories/go/panic/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 将数据库转换为gormt结构</title>
    <link href="https://forgetst.github.io/go/command/golang-%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AC%E6%8D%A2%E4%B8%BAgormt%E7%BB%93%E6%9E%84.html"/>
    <id>https://forgetst.github.io/go/command/golang-将数据库转换为gormt结构.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-22T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/xxjwxc/gormt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;gorm-tools&lt;/code&gt;&lt;/a&gt;是将&lt;code&gt;gorm mysql&lt;/code&gt;数据库转 &lt;code&gt;struct&lt;/code&gt; 工具,可以将mysql数据库自动生成golang sturct结构，带大驼峰命名规则,带json标签。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="command" scheme="https://forgetst.github.io/categories/go/command/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang gorm使用记录</title>
    <link href="https://forgetst.github.io/go/gorm/golang-gorm%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://forgetst.github.io/go/gorm/golang-gorm使用记录.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-22T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;用于Golang的出色的ORM库旨在对开发人员友好。&lt;br&gt;GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="gorm" scheme="https://forgetst.github.io/categories/go/gorm/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
      <category term="gorm" scheme="https://forgetst.github.io/tags/gorm/"/>
    
  </entry>
  
  <entry>
    <title>go get命令及下载异常处理</title>
    <link href="https://forgetst.github.io/go/command/go-get%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"/>
    <id>https://forgetst.github.io/go/command/go-get命令及下载异常处理.html</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-19T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。整个过程就像安装一个 App 一样简单。&lt;/p&gt;
&lt;p&gt;这个命令可以动态获取远程代码包，目前支持的有 BitBucket、GitHub、Google Code 和 Launchpad。在使用 go get 命令前，需要安装与远程包匹配的代码管理工具，如 Git、SVN、HG 等，参数中需要提供一个包名。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
      <category term="command" scheme="https://forgetst.github.io/categories/go/command/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Linux flock command</title>
    <link href="https://forgetst.github.io/Linux/command/flock/linux-flock-command.html"/>
    <id>https://forgetst.github.io/Linux/command/flock/linux-flock-command.html</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2021-02-18T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;linux在多个进程同时操作同一份文件的时候,很容易导致文件混乱,这时候就需要锁,来保证文件的完成性。&lt;br&gt;flock主要三种操作类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lock_sh，常被用作读共享锁；&lt;/li&gt;
&lt;li&gt;LOCK_EX，只能被一个进行使用，常被用作写锁；&lt;/li&gt;
&lt;li&gt;LOCK_UN，释放锁；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用共享锁LOCK_SH，如果是读取，不需要等待，但如果是写入，需要等待读取完成。&lt;br&gt;使用独占锁LOCK_EX，无论写入/读取都需要等待。&lt;br&gt;LOCK_UN，无论使用共享/读占锁，使用完后需要解锁。&lt;br&gt;LOCK_NB，当被锁定时，不阻塞，而是提示锁定。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://forgetst.github.io/categories/Linux/"/>
    
      <category term="command" scheme="https://forgetst.github.io/categories/Linux/command/"/>
    
      <category term="flock" scheme="https://forgetst.github.io/categories/Linux/command/flock/"/>
    
    
      <category term="Linux" scheme="https://forgetst.github.io/tags/Linux/"/>
    
      <category term="command" scheme="https://forgetst.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>rclone 教程</title>
    <link href="https://forgetst.github.io/redis/rclone-%E6%95%99%E7%A8%8B.html"/>
    <id>https://forgetst.github.io/redis/rclone-教程.html</id>
    <published>2021-02-06T16:00:00.000Z</published>
    <updated>2021-02-06T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Rclone是一个命令行程序，支持不同网盘的同步上传，下载等功能。&lt;br&gt;官方地址：&lt;a href=&quot;https://rclone.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rclone.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://forgetst.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://forgetst.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存雪崩、穿透、击穿概念及解决办法</title>
    <link href="https://forgetst.github.io/redis/redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>https://forgetst.github.io/redis/redis缓存雪崩、穿透、击穿概念及解决办法.html</id>
    <published>2021-02-06T16:00:00.000Z</published>
    <updated>2021-02-06T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;redis缓存示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-7d2f995b14ee7691dc9ad66e91609c05_r.jpg&amp;refer=http%3A%2F%2Fpic2.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1615278693&amp;t=18e63386b257549d416b9378b7c1c09b&quot; alt=&quot;redis缓存示意图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://forgetst.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://forgetst.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Celery Once来防止Celery重复执行同一个任务</title>
    <link href="https://forgetst.github.io/celery/%E4%BD%BF%E7%94%A8celery-once%E6%9D%A5%E9%98%B2%E6%AD%A2celery%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://forgetst.github.io/celery/使用celery-once来防止celery重复执行同一个任务.html</id>
    <published>2021-02-04T16:00:00.000Z</published>
    <updated>2021-02-04T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;Celery&lt;/code&gt;的时候发现有的时候&lt;code&gt;Celery&lt;/code&gt;会将同一个任务执行两遍。比如相同的任务在不同的&lt;code&gt;worker&lt;/code&gt;中被分别执行，并且时间只相差几毫秒，使用&lt;code&gt;Celery Once&lt;/code&gt;可以处理这一情况。&lt;code&gt;Celery Once&lt;/code&gt;是利用 Redis 加锁来实现, &lt;code&gt;Celery Once&lt;/code&gt;在 &lt;code&gt;Task&lt;/code&gt;类基础上实现了&lt;code&gt;QueueOnce&lt;/code&gt;类，该类提供了任务去重的功能，所以在使用时，我们自己实现的方法需要将&lt;code&gt;QueueOnce&lt;/code&gt;设置为&lt;code&gt;base&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="celery" scheme="https://forgetst.github.io/categories/celery/"/>
    
    
      <category term="python" scheme="https://forgetst.github.io/tags/python/"/>
    
      <category term="celery" scheme="https://forgetst.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>Golang在package main包下的中函数互相调用</title>
    <link href="https://forgetst.github.io/go/golang%E5%9C%A8package-main%E5%8C%85%E4%B8%8B%E7%9A%84%E4%B8%AD%E5%87%BD%E6%95%B0%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8.html"/>
    <id>https://forgetst.github.io/go/golang在package-main包下的中函数互相调用.html</id>
    <published>2021-01-31T16:00:00.000Z</published>
    <updated>2021-01-31T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Golang&lt;/code&gt; Main包下多个文件的相互调用，引发 &lt;code&gt;.\main.go:82:2: undefined: tsPra01&lt;/code&gt;异常，处理如下。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://forgetst.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://forgetst.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>python pip 用法</title>
    <link href="https://forgetst.github.io/python/python-pip-%E7%94%A8%E6%B3%95.html"/>
    <id>https://forgetst.github.io/python/python-pip-用法.html</id>
    <published>2021-01-26T16:00:00.000Z</published>
    <updated>2021-01-26T16:00:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://forgetst.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://forgetst.github.io/tags/python/"/>
    
  </entry>
  
</feed>
