<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git 不同仓库间进行项目迁移]]></title>
    <url>%2F2019%2F08%2F07%2Fgit-%E4%BB%8E%E4%B8%80%E4%B8%AAgit%E4%BB%93%E5%BA%93%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AAgit%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[需求 将仓库A的某个branch的代码独立成为一个新的仓库B。并且提交的代码为当前分支最新的，且保留整个提交历史。这种需求对于git来说小菜一碟，可通过git remote命令来实现。 实现 拉取仓库A当前分支(例如 master 分支)，保持其为最新的 123456789git pull origin master # 拉取远程master分支的代码注：origin 代表远程仓库，其指向当前仓库的git地址, git remote 可进行查看，如下：$ git remoteorigin$ git remote -vorigin https://github.com/forgetST/blog.git (fetch)origin https://github.com/forgetST/blog.git (push) 创建仓库B(例如 test)，若不存在 在仓库A（blog）中增加仓库B的远程地址，即git地址 12345678910111213141516# 当前只关联了一个远程仓库A$ git remote -vorigin https://github.com/forgetST/blog.git (fetch)origin https://github.com/forgetST/blog.git (push)https://github.com/forgetST/test.git# 关联远程仓库B(test)# test只是别名，可以随意起，但不能与已有远程名同名，至于原因，大家都想自己是独一无二的吗^-^$ git remote add test https://github.com/forgetST/test.git# 仓库test已关联成功$ git remote -vorigin https://github.com/forgetST/blog.git (fetch)origin https://github.com/forgetST/blog.git (push)test https://github.com/forgetST/test.git (fetch)test https://github.com/forgetST/test.git (push) 仓库A（blog）代码推送到仓库A（test） 12$ git push test master # 一般会失败，错误见附录$ git push -f test master # 强制推送，有风险，慎用 附录 git remote add 用法： 12345678910usage: git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt; -f, --fetch fetch the remote branches --tags import all tags and associated objects when fetching or do not fetch any tag at all (--no-tags) -t, --track &lt;branch&gt; branch(es) to track -m, --master &lt;branch&gt; master branch --mirror[=(push|fetch)] set up remote as a mirror to push to or fetch from *git push origin_name origin_branch出错 * 1234567891011$ git push test masterTo https://github.com/forgetST/test.git ! [rejected] master -&gt; master (fetch first)error: failed to push some refs to &apos;https://github.com/forgetST/test.git&apos;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.注：当前分支有改动，可新建新的分支进行推送，新建分支不能与推送的仓库已有分支重名。或者强制推送，加选项 -f，视情况而用（慎用）。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux pkill command]]></title>
    <url>%2F2019%2F08%2F07%2FLinux-command-pkill%2F</url>
    <content type="text"><![CDATA[作用pkill 用做管理进程时，pkill 命令和 killall 命令的用法相同，都是通过进程名杀死一类进程pkill 另一重要的功能就是按照终端用户来剔出用户登录 用法 语法格式 1pkill [options] pattern 参数选项 123456789101112131415161718192021222324-&lt;sig&gt;, --signal &lt;sig&gt; signal to send (either number or name)-e, --echo display what is killed-c, --count count of matching processes-f, --full use full process name to match-g, --pgroup &lt;PGID,...&gt; match listed process group IDs-G, --group &lt;GID,...&gt; match real group IDs-n, --newest select most recently started-o, --oldest select least recently started-P, --parent &lt;PPID,...&gt; match only child processes of the given parent-s, --session &lt;SID,...&gt; match session IDs-t, --terminal &lt;tty,...&gt; match by controlling terminal-u, --euid &lt;ID,...&gt; match by effective IDs-U, --uid &lt;ID,...&gt; match by real IDs-x, --exact match exactly with the command name-F, --pidfile &lt;file&gt; read PIDs from file-L, --logpidfile fail if PID file is not locked--ns &lt;PID&gt; match the processes that belong to the same namespace as &lt;pid&gt;--nslist &lt;ns,...&gt; list which namespaces will be considered for the --ns option. Available namespaces: ipc, mnt, net, pid, user, uts -h, --help display this help and exit-V, --version output version information and exi 用法示例 用做进程管理，根据进程名杀死一类进程 语法格式 1pkill [信号] 进程名 命令常用的信号及其含义 信号编号 信号名 含义 0 EXIT 程序退出时收到该信息。 1 HUP 挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。 2 INT 表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。 3 QUIT 退出。 9 KILL 杀死进程，即强制结束进程。 11 SEGV 段错误。 15 TERM 正常结束进程，是 kill 命令的默认信号。 用法示例 12345678910111213# 查看python进程[root@hadoop-centos-01 ~]# pstree -p | grep python | |-sshd(33793)---bash(33803)---python(34176)[root@hadoop-centos-01 ~]#[root@hadoop-centos-01 ~]# ps -ef | grep pythonroot 34176 33803 0 22:30 pts/2 00:00:00 pythonroot 34188 33542 0 22:31 pts/1 00:00:00 grep --color=auto python# 执行pkill后再去查看，python进程已被杀死[root@hadoop-centos-01 ~]# pkill -kill python[root@hadoop-centos-01 ~]# pstree -p | grep python[root@hadoop-centos-01 ~]# ps -ef | grep pythonroot 34241 33542 0 22:33 pts/1 00:00:00 grep --color=auto python 踢出登陆用户 语法格式 1pkill [-t 终端号] 进程名 用法示例 12345678910111213141516[root@hadoop-centos-01 ~]# w # 查看当前登陆的用户 22:47:54 up 1 day, 16:20, 4 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/0 192.168.244.6 08:03 14:43m 0.13s 0.13s -bashroot pts/1 192.168.244.6 21:56 2.00s 0.41s 0.01s wroot pts/2 192.168.244.6 22:03 18.00s 0.10s 0.10s -bashroot pts/3 192.168.244.6 06:35 14:43m 0.17s 0.17s -bash[root@hadoop-centos-01 ~]#[root@hadoop-centos-01 ~]# pkill -kill -t pts/2[root@hadoop-centos-01 ~]# w # 再次查看，pts/2已被杀掉 22:51:26 up 1 day, 16:24, 3 users, load average: 0.01, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/0 192.168.244.6 08:03 14:46m 0.13s 0.13s -bashroot pts/1 192.168.244.6 21:56 6.00s 0.43s 0.02s wroot pts/3 192.168.244.6 06:35 14:47m 0.17s 0.17s -bash]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
        <category>pkill</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux killall command]]></title>
    <url>%2F2019%2F08%2F06%2FLinux-command-killall%2F</url>
    <content type="text"><![CDATA[作用killall - kill processes by name killall sends a signal to all processes running any of the specified commands. If no signal name is specified, SIGTERM is sent. Signals can be specified either by name (e.g. -HUP or -SIGHUP) or by number (e.g. -1) or by option -s. If the command name is not regular expression (option -r) and contains a slash (/), processes executing that particular file will be selected for killing, independent of their name. killall returns a zero return code if at least one process has been killed for each listed command, or no commands were listed and at least one process matched the -u and -Z search criteria. killall returns non-zero otherwise. A killall process never kills itself (but may kill other killall processes) 用法命令格式123killall [-Z CONTEXT] [-u USER] [ -eIgiqrvw ] [ -SIGNAL ] NAME...killall -l, --listkillall -V, --version 命令参数12345678910111213141516-e,--exact require exact match for very long names-I,--ignore-case case insensitive process name match-g,--process-group kill process group instead of process-y,--younger-than kill processes younger than TIME-o,--older-than kill processes older than TIME-i,--interactive ask for confirmation before killing-l,--list list all known signal names-q,--quiet don&apos;t print complaints-r,--regexp interpret NAME as an extended regular expression-s,--signal SIGNAL send this signal instead of SIGTERM-u,--user USER kill only process(es) running as USER-v,--verbose report if the signal was successfully sent-V,--version display version information-w,--wait wait for processes to die-Z,--context REGEXP kill only process(es) having context (must precede other arguments) 123456789101112131415-e,--exact 精准匹配。由于命令名长于15个字符时，会杀死匹配前15个字符的所有进程。此时需要使用-e选项进行精准匹配。-g,--process-group 杀死属于该进程组的所有进程。-i,--interactive 交互式，杀死进程前请求确认-I,--ignore-case 进程名匹配不区分大小写-l,--list 列出所有信号名-o,--older-than 仅匹配指定时间之前（在指定时间之前开始）的进程。单位s、m、h、d、w（周）、M、y-q,--quiet 静默模式，不报错-r,--regexp 使用扩展正则表达式解释name-s,--signal 发送指定信号等同[-signal]-u.--user 仅终止指定用户拥有的进程。命令名是可选的。-v,--verbose 报告是否发送成功-V,version 显示版本-w,--wait 等待killall执行完成，每秒检测一次，直到完成返回。如果信号被忽略或不起作用，或停留在僵尸状态，killall会永久等待。-y,--younger-than 仅匹配指定时间之后的进程，与-o选项相反。-z,--context （仅限SELinux）指定环境（变量）：仅杀死含有与指定扩展正则表达式匹配的环境（变量）的进程。必须在其他参数之前，命令名是可选的。 用法示例查看版本 12345678[root@hadoop-centos-01 ~]# killall -Vkillall (PSmisc) 22.20Copyright (C) 1993-2012 Werner Almesberger and Craig SmallPSmisc comes with ABSOLUTELY NO WARRANTY.This is free software, and you are welcome to redistribute it underthe terms of the GNU General Public License.For more information about these matters, see the files named COPYING. 查看信号列表 1234[root@hadoop-centos-01 ~]# killall -lHUP INT QUIT ILL TRAP ABRT IOT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERMSTKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH IO PWR SYSUNUSED 常用的信号说明： HUP（1，终端断线）， INT（2，中断，同&lt;Ctrl&gt;+c） QUIT（3，退出，同&lt;Ctrl&gt;+\） KILL（9，强制终止） TERM（15，缺省信号，终止，正常结束） CONT（18，继续，同fg/bg命令） STOP（19，停止） TSTP（20，暂停，同&lt;Ctrl&gt;+Z） 杀死所有同名进程 12345678910111213[root@hadoop-centos-01 ~]# ps -aux | grep pythonroot 32618 0.0 0.0 112708 980 pts/0 S+ 07:18 0:00 grep --color=auto python# 启动一个python后台进程[root@hadoop-centos-01 ~]# ps -aux | grep pythonroot 32619 0.2 0.5 130456 5040 pts/3 S+ 07:18 0:00 pythonroot 32621 0.0 0.0 112708 980 pts/0 S+ 07:18 0:00 grep --color=auto python# 执行 killall python 命令， 等效于 killall -15 python[root@hadoop-centos-01 ~]# killall python# 再次过滤发现该进程以终止[root@hadoop-centos-01 ~]# ps -aux | grep pythonroot 32624 0.0 0.0 112708 980 pts/0 S+ 07:18 0:00 grep --color=auto python 向进程发送指定信号 123456789101112131415161718[root@hadoop-centos-01 ~]# ps -aux | grep pythonroot 32670 0.1 0.5 130456 5044 pts/3 T 07:22 0:00 pythonroot 32684 0.0 0.0 112708 980 pts/0 S+ 07:23 0:00 grep --color=auto python[root@hadoop-centos-01 ~]# killall python; ps -aux | grep pythonroot 32670 0.0 0.5 130456 5044 pts/3 T 07:22 0:00 pythonroot 32734 0.0 0.0 112708 980 pts/0 S+ 07:26 0:00 grep --color=auto python# 正常无法终止进程时，需要强制终止，需发送指定信号，终止进程[root@hadoop-centos-01 ~]# killall -9 pythonPython 2.7.15 (default, May 17 2019, 07:26:27)[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;[1]+ Stopped python[root@hadoop-centos-01 ~]# ps -aux | grep pythonroot 32766 0.0 0.0 112708 980 pts/0 S+ 07:29 0:00 grep --color=auto python 杀掉所有的登录后的shell 123456[root@hadoop-centos-01 ~]# killall -9 bashSession stopped - Press &lt;return&gt; to exit tab - Press R to restart session - Press S to save terminal output to file]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
        <category>killall</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux kill command]]></title>
    <url>%2F2019%2F08%2F06%2FLinux-command-kill%2F</url>
    <content type="text"><![CDATA[作用kill 命令是用来向进程发送一个用户指定的信号，对进程进行相应的操作。 kill 命令的执行原理是向操作系统内核发送一个信号（多是终止信号）和目标进程的 PID，系统内核根据收到的信号类型，对指定进程进行相应的操作。 进程PID可用ps、pidof、pstree、top等工具获取，然后使用kill命令来结束该进程。 用法命令格式123456kill [options] &lt;pid&gt; [...]options : -&lt;signal&gt; : 指定发送给进程的信号，指定信号的名称或号码都可以。 -l : 列出所有信号的名称和号码。&lt;pid&gt; […] : 把信号发送给列出的所有进程。 命令参数123456-l 参数为信号名称，显示该信号的数字。如果不加信号参数，显示全部信号名称-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号-s 指定发送信号-u 指定用户-signal_name 指定进程发送信号名称-signal_number 指定进程发送信号数字 使用实例12345678910111213141516[root@hadoop-centos-01 ~]# kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR111) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+338) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+843) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-758) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2[root@hadoop-centos-01 ~]# kill -l SIGRTMIN+1246 代号 名称 内容 1 SIGHUP 启动被终止的程序，可让该进程重新读取自己的配置文件，类似重新启动。 2 SIGINT 相当于用键盘输入 [ctrl]-c 来中断一个程序的进行。 9 SIGKILL 代表强制中断一个程序的进行，如果该程序进行到一半，那么尚未完成的部分可能会有“半产品”产生，类似 vim会有 .filename.swp 保留下来。 15 SIGTERM 以正常的方式来终止该程序。由于是正常的终止，所以后续的动作会将他完成。不过，如果该程序已经发生问题，就是无法使用正常的方法终止时，输入这个 signal 也是没有用的。 19 SIGSTOP 相当于用键盘输入 [ctrl]-z 来暂停一个程序的进行。 12[root@hadoop-centos-01 ~]# kill -15 pid# 这条命令发信号让进程正常退出。所谓的正常退出是指按应用程序自己的退出流程完成退出，这样就可以清理并释放资源。 12[root@hadoop-centos-01 ~]# kill -9 pid# 强制结束进程，这样结束掉的进程不会进行资源的清理工作。 12[root@hadoop-centos-01 ~]# kill -19 pid# 暂停进程 1234# 杀死指定用户所有进程[root@hadoop-centos-01 ~]# kill -9 $(ps -ef | grep username)# 或[root@hadoop-centos-01 ~]# kill -u username 总结kill命令可以带信号选项，也可以不带信号。如果没有信号号码，kill命令就会发出终止信号（15），该信号可以被进程捕获，使进程在退出之前可以清理并释放资源。也可以向进程发送发送指定信号； 可以向多个进程发信号或终止它们，当kill成功地发送了信号后，shell会在屏幕上显示出进程的终止信息； 应注意，信号使进程强行终止，这常会带来一些副作用，如数据丢失或者终端无法恢复到正常状态。发送信号时必须小心，只有在万不得已时，才用kill信号(9)，因为进程不能首先捕获它。要撤销所有的后台作业，可以输入kill 0。因为有些在后台运行的命令会启动多个进程，跟踪并找到所有要杀掉的进程的PID是件很麻烦的事。这时，使用kill 0来终止所有由当前shell启动的进程，是个有效的方法； kill 命令并不能100%终止进程，kill 命令只是“发送”一个信号，故只有当信号被程序成功“捕获”，系统才会执行 kill 命令指定的操作；反之，如果信号被“封锁”或者“忽略”，则 kill 命令将会失效。]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
        <category>kill</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python __future__ module]]></title>
    <url>%2F2019%2F08%2F06%2Fpython-module-py-future-d%2F</url>
    <content type="text"><![CDATA[简介将下一个新版本的特性导入到当前版本并进行测试（新版的改动不兼容老版本，就是这么任性）。 py2.7-源代码: Lib/__future__.py py3.7-源代码：Lib/__future__.py 属性python2.7123&gt;&gt;&gt; import __future__ as ft&gt;&gt;&gt; dir(ft)[&apos;CO_FUTURE_ABSOLUTE_IMPORT&apos;, &apos;CO_FUTURE_DIVISION&apos;, &apos;CO_FUTURE_PRINT_FUNCTION&apos;, &apos;CO_FUTURE_UNICODE_LITERALS&apos;, &apos;CO_FUTURE_WITH_STATEMENT&apos;, &apos;CO_GENERATOR_ALLOWED&apos;, &apos;CO_NESTED&apos;, &apos;_Feature&apos;, &apos;__all__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;absolute_import&apos;, &apos;all_feature_names&apos;, &apos;division&apos;, &apos;generators&apos;, &apos;nested_scopes&apos;, &apos;print_function&apos;, &apos;unicode_literals&apos;, &apos;with_statement&apos;] python3.7123&gt;&gt;&gt; import __future__ as ft&gt;&gt;&gt; dir(ft) [&apos;CO_FUTURE_ABSOLUTE_IMPORT&apos;, &apos;CO_FUTURE_ANNOTATIONS&apos;, &apos;CO_FUTURE_BARRY_AS_BDFL&apos;, &apos;CO_FUTURE_DIVISION&apos;, &apos;CO_FUTURE_GENERATOR_STOP&apos;, &apos;CO_FUTURE_PRINT_FUNCTION&apos;, &apos;CO_FUTURE_UNICODE_LITERALS&apos;, &apos;CO_FUTURE_WITH_STATEMENT&apos;, &apos;CO_GENERATOR_ALLOWED&apos;, &apos;CO_NESTED&apos;, &apos;_Feature&apos;, &apos;__all__&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;absolute_import&apos;, &apos;all_feature_names&apos;, &apos;annotations&apos;, &apos;barry_as_FLUFL&apos;, &apos;division&apos;, &apos;generator_stop&apos;, &apos;generators&apos;, &apos;nested_scopes&apos;, &apos;print_function&apos;, &apos;unicode_literals&apos;, &apos;with_statement&apos;] __future__.py 中的每一条语句都是以下格式的： 1FeatureName = _Feature(OptionalRelease, MandatoryRelease, CompilerFlag) OptionalRelease 和 MandatoryRelease 的格式为 5 元素元组，如下： 123456(PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int PY_MINOR_VERSION, # the 1; an int PY_MICRO_VERSION, # the 0; an int PY_RELEASE_LEVEL, # &quot;alpha&quot;, &quot;beta&quot;, &quot;candidate&quot; or &quot;final&quot;; string PY_RELEASE_SERIAL # the 3; an int) OptionalRelease 记录一个特性首次发布时的 Python 版本。 MandatoryRelases 未发布时，表示该特性会变成语言的一部分的预测时间。 发布后，用来记录这个特性是何时成为语言的一部分的。从该版本往后，使用该特性将不需要 future 语句，不过很多人还是会加上对应的 import。 若是 None, 表示这个特性已经被撤销。 CompilerFlag 若代码需要动态编译，在调用内建函数compile() 时需传入以开启对应的特性，其存储在对应实例的compiler_flag变量中。 __future__ 中不会删除特性的描述。从 Python 2.1 中首次加入以来，通过这种方式引入了以下特性： 特性 可选版本 强制加入版本 效果 nested_scopes 2.1.0b1 2.2 PEP 227: Statically Nested Scopes generators 2.2.0a1 2.3 PEP 255: Simple Generators division 2.2.0a2 3.0 PEP 238: Changing the Division Operator absolute_import 2.5.0a1 3.0 PEP 328: Imports: Multi-Line and Absolute/Relative with_statement 2.5.0a1 2.6 PEP 343: The “with” Statement print_function 2.6.0a2 3.0 PEP 3105: Make print a function unicode_literals 2.6.0a2 3.0 PEP 3112: Bytes literals in Python 3000 generator_stop 3.5.0b1 3.7 PEP 479: StopIteration handling inside generators annotations 3.7.0b1 4.0 PEP 563: Postponed evaluation of annotations 用法divisionpython 2.7示例： 123456789# Python 2.x中，对于除法有两种情况，如果是整数相除，结果仍是整数，余数会被扔掉，这种除法叫“地板除”&gt;&gt;&gt; 10 / 33&gt;&gt;&gt; 10.0 / 3 3.3333333333333335&gt;&gt;&gt; from __future__ import division # 导入后除法将变为精确除法&gt;&gt;&gt; 10 / 33.3333333333333335 12345# Python 3.x中，所有的除法都是精确除法，地板除用//表示&gt;&gt;&gt; 10 / 3 3.3333333333333335&gt;&gt;&gt; 10 // 3 3 unicode_literalspython2.7示例： 123456789101112131415&gt;&gt;&gt; type(&apos;hello world&apos;)&lt;type &apos;str&apos;&gt;&gt;&gt;&gt; type(b&apos;hello world&apos;)&lt;type &apos;str&apos;&gt;&gt;&gt;&gt; type(u&apos;hello world&apos;)&lt;type &apos;unicode&apos;&gt;# python3 默认字符编码为 unicode， 类型为 str&gt;&gt;&gt; from __future__ import unicode_literals&gt;&gt;&gt; type(&apos;hello world&apos;)&lt;type &apos;unicode&apos;&gt;&gt;&gt;&gt; type(b&apos;hello world&apos;)&lt;type &apos;str&apos;&gt;&gt;&gt;&gt; type(u&apos;hello world&apos;)&lt;type &apos;unicode&apos;&gt; python3.7示例： 123456&gt;&gt;&gt; type(&apos;hello world&apos;) &lt;class &apos;str&apos;&gt;&gt;&gt;&gt; type(b&apos;hello world&apos;) &lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; type(u&apos;hello world&apos;) &lt;class &apos;str&apos;&gt; 注：如果你是python2.X版本，在导入新的功能特性后，就应该按照新功能的特性进行编写。 absolute_import加入绝对引入新特性]]></content>
      <categories>
        <category>python</category>
        <category>module</category>
        <category>__future__</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux netstat command]]></title>
    <url>%2F2019%2F08%2F05%2FLinux-command-netstat%2F</url>
    <content type="text"><![CDATA[简介在Internet RFC标准中， Netstat是在内核中访问网络连接状态及其相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。 Netstat 是控制台命令，是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。 Netstat 用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。 作用netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。 用法一般用netstat -an 来显示所有连接的端口并用数字表示。若使用时不带参数，netstat显示活动的 TCP 连接。 1234567891011121314[root@hadoop-centos-01 ~]# netstat | moreActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address Statetcp 0 48 hadoop-centos-01:ssh 192.168.xxx.x:49299 ESTABLISHEDtcp 0 0 hadoop-centos-01:ssh 192.168.xxx.x:49304 ESTABLISHEDActive UNIX domain sockets (w/o servers)Proto RefCnt Flags Type State I-Node Pathunix 3 [ ] DGRAM 9134 /run/systemd/notifyunix 2 [ ] DGRAM 9136 /run/systemd/cgroups-agentunix 2 [ ] DGRAM 277787unix 3 [ ] STREAM CONNECTED 48707unix 3 [ ] STREAM CONNECTED 48794 /run/systemd/journal/stdoutunix 3 [ ] STREAM CONNECTED 36513 /run/systemd/journal/stdoutunix 3 [ ] STREAM CONNECTED 48948 @/tmp/dbus-iOMFhoTUUK 输出结果可分为两个部分： Active Internet connections（有源TCP连接） Proto ：显示连接使用的协议 Recv-Q ： 接收队列 Send-Q ： 发送队列 Local Address Foreign Address State 注： “Recv-Q”和”Send-Q”一般都应该是0。如果不是则表示软件包正在队列中堆积，这种情况非常少见。 Active UNIX domain sockets （有源Unix域套接口） Proto ：显示连接使用的协议 RefCnt ：表示连接到本套接口上的进程数量 Flags Type： 显示套接口的类型 State ：显示套接口当前的状态 I-Node Path ：表示连接到套接口的其它进程使用的路径名 语法格式 1234netstat [-vWeenNcCF] [&lt;Af&gt;] -r netstat &#123;-V|--version|-h|--help&#125; netstat [-vWnNcaeol] [&lt;Socket&gt; ...] netstat &#123; [-vWeenNac] -I[&lt;Iface&gt;] | [-veenNac] -i | [-cnNe] -M | -s [-6tuw] &#125; [delay] 参数选项 123456789101112131415161718192021222324-a或--all：显示所有连线中的Socket； -A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址； -c或--continuous：持续列出网络状态； -C或--cache：显示路由器配置的快取信息； -e或--extend：显示网络其他相关信息； -F或--fib：显示FIB； -g或--groups：显示多重广播功能群组组员名单； -h或--help：在线帮助； -i或--interfaces：显示网络界面信息表单； -l或--listening：显示监控中的服务器的Socket； -M或--masquerade：显示伪装的网络连线； -n或--numeric：直接使用ip地址，而不通过域名服务器； -N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称； -o或--timers：显示计时器； -p或--programs：显示正在使用Socket的程序识别码和程序名称； -r或--route：显示Routing Table； -s或--statistice：显示网络工作信息统计表； -t或--tcp：显示TCP传输协议的连线状况； -u或--udp：显示UDP传输协议的连线状况； -v或--verbose：显示指令执行过程； -V或--version：显示版本信息； -w或--raw：显示RAW传输协议的连线状况； -x或--unix：此参数的效果和指定&quot;-A unix&quot;参数相同； --ip或--inet：此参数的效果和指定&quot;-A inet&quot;参数相同。 参数示例 列出所有端口情况 123[root@hadoop-centos-01 ~]# netstat -a # 列出所有端口[root@hadoop-centos-01 ~]# netstat -au # 列出所有UDP端口[root@hadoop-centos-01 ~]# netstat -at # 列出所有TCP端口 列出所有处于监听状态的 Sockets 1234[root@hadoop-centos-01 ~]# netstat -l # 只显示监听端口[root@hadoop-centos-01 ~]# netstat -lt # 显示监听TCP端口[root@hadoop-centos-01 ~]# netstat -lu # 显示监听UDP端口[root@hadoop-centos-01 ~]# netstat -lx # 显示监听UNIX端口 显示每个协议的统计信息 123[root@hadoop-centos-01 ~]# netstat -s # 显示所有端口的统计信息[root@hadoop-centos-01 ~]# netstat -st # 显示所有TCP的统计信息[root@hadoop-centos-01 ~]# netstat -su # 显示所有UDP的统计信息 显示 PID 和进程名称 123456789101112[root@hadoop-centos-01 ~]# netstat -p | moreActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 hadoop-centos-01:ssh 192.168.244.6:49299 ESTABLISHED 28069/sshd: root@pttcp 0 0 hadoop-centos-01:ssh 192.168.244.6:49304 ESTABLISHED 28073/sshd: root@noActive UNIX domain sockets (w/o servers)Proto RefCnt Flags Type State I-Node PID/Program name Pathunix 3 [ ] DGRAM 9134 1/systemd /run/systemd/notifyunix 3 [ ] STREAM CONNECTED 48948 7427/dbus-daemon @/tmp/dbus-iOMFhoTUUKunix 3 [ ] STREAM CONNECTED 48796 7568/gsd-powerunix 3 [ ] STREAM CONNECTED 48947 7571/gsd-rfkillunix 3 [ ] STREAM CONNECTED 37682 6618/abrt-watch-log 显示核心路由信息 123456789101112131415[root@hadoop-centos-01 ~]# netstat -rKernel IP routing tableDestination Gateway Genmask Flags MSS Window irtt Ifacedefault gateway 0.0.0.0 UG 0 0 0 ens33link-local 0.0.0.0 255.255.0.0 U 0 0 0 ens33192.168.122.0 0.0.0.0 255.255.255.0 U 0 0 0 virbr0192.168.244.0 0.0.0.0 255.255.255.0 U 0 0 0 ens33[root@hadoop-centos-01 ~]# netstat -rnKernel IP routing tableDestination Gateway Genmask Flags MSS Window irtt Iface0.0.0.0 192.168.244.2 0.0.0.0 UG 0 0 0 ens33169.254.0.0 0.0.0.0 255.255.0.0 U 0 0 0 ens33192.168.122.0 0.0.0.0 255.255.255.0 U 0 0 0 virbr0192.168.244.0 0.0.0.0 255.255.255.0 U 0 0 0 ens33 查看端口和服务 123456789101112131415[root@hadoop-centos-01 ~]# netstat -anp | grep sshtcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 7039/sshdtcp 0 0 127.0.0.1:6010 0.0.0.0:* LISTEN 28069/sshd: root@pttcp 0 0 192.168.244.11:22 192.168.244.6:49299 ESTABLISHED 28069/sshd: root@pttcp 0 0 192.168.244.11:22 192.168.244.6:49304 ESTABLISHED 28073/sshd: root@notcp6 0 0 :::22 :::* LISTEN 7039/sshdtcp6 0 0 ::1:6010 :::* LISTEN 28069/sshd: root@ptunix 3 [ ] STREAM CONNECTED 42737 7039/sshdunix 2 [ ] DGRAM 278152 28069/sshd: root@ptunix 2 [ ] DGRAM 278281 28073/sshd: root@no[root@hadoop-centos-01 ~]# netstat -anp | grep 7039tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 7039/sshdtcp6 0 0 :::22 :::* LISTEN 7039/sshdunix 3 [ ] STREAM CONNECTED 42737 7039/sshd]]></content>
      <categories>
        <category>Linux</category>
        <category>command</category>
        <category>netstat</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python glob module]]></title>
    <url>%2F2019%2F08%2F05%2Fpython-module-glob%2F</url>
    <content type="text"><![CDATA[简介glob —查找符合特定规则的文件路径名 Source code: Lib/glob.py 匹配符： * 匹配0个或多个字符 ? 匹配单个字符 [] 匹配指定范围内的字符，如：[0-9]匹配数字 属性python2.7123&gt;&gt;&gt; import glob&gt;&gt;&gt; dir(glob)[&apos;__all__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;_unicode&apos;, &apos;fnmatch&apos;, &apos;glob&apos;, &apos;glob0&apos;, &apos;glob1&apos;, &apos;has_magic&apos;, &apos;iglob&apos;, &apos;magic_check&apos;, &apos;os&apos;, &apos;re&apos;, &apos;sys&apos;] python3.7123&gt;&gt;&gt; import glob &gt;&gt;&gt; dir(glob) [&apos;__all__&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;_glob0&apos;, &apos;_glob1&apos;, &apos;_glob2&apos;, &apos;_iglob&apos;, &apos;_ishidden&apos;, &apos;_isrecursive&apos;, &apos;_iterdir&apos;, &apos;_rlistdir&apos;, &apos;escape&apos;, &apos;fnmatch&apos;, &apos;glob&apos;, &apos;glob0&apos;, &apos;glob1&apos;, &apos;has_magic&apos;, &apos;iglob&apos;, &apos;magic_check&apos;, &apos;magic_check_bytes&apos;, &apos;os&apos;, &apos;re&apos;] 用法1234567目录结构：D:\Practice： 1.gif 2.txt card.gif sub 3.txt python2.7glob.glob(pathname)根据路径名匹配模式，返回一个路径名列表，可能为空。 路径名应是包含路径规范的字符串，可以是相对路径，亦可是绝对路径，返回形式取决于匹配模式。 1234567891011121314151617&gt;&gt;&gt; import os&gt;&gt;&gt; import glob&gt;&gt;&gt; os.getcwd()&apos;D:\\Practice&apos;# 相对路径&gt;&gt;&gt; glob.glob(&apos;*.txt&apos;)[&apos;2.txt&apos;]&gt;&gt;&gt; glob.glob(&apos;[0-9].*&apos;)[&apos;1.gif&apos;, &apos;2.txt&apos;]# 绝对路径&gt;&gt;&gt; glob.glob(os.getcwd() + os.sep +&apos;*.txt&apos;)[&apos;D:\\Practice\\2.txt&apos;]&gt;&gt;&gt; glob.glob(os.getcwd() + os.sep +&apos;[0-9].*&apos;)[&apos;D:\\Practice\\1.gif&apos;, &apos;D:\\Practice\\2.txt&apos;] glob.iglob(pathname)根据路径名匹配模式，返回一个路径名列表的迭代器 python3.7glob.glob(pathname, *, recursive=False)根据路径名匹配模式，返回一个路径名列表，可能为空。 路径名应是包含路径规范的字符串，可以是相对路径，亦可是绝对路径，返回形式取决于匹配模式。 recursive为真，则模式“**”将匹配任何文件以及零个或多个目录和子目录。如果模式后面跟着一个os.sep，只有目录和子目录匹配。 123456789101112131415161718192021222324252627282930&gt;&gt;&gt; import os&gt;&gt;&gt; import glob&gt;&gt;&gt; os.getcwd()&apos;D:\\Practice&apos;&gt;&gt;&gt; os.listdir()[&apos;1.gif&apos;, &apos;2.txt&apos;, &apos;card.gif&apos;, &apos;sub&apos;]# 相对路径&gt;&gt;&gt; glob.glob(&apos;*.txt&apos;, recursive=False)[&apos;2.txt&apos;]&gt;&gt;&gt; glob.glob(&apos;[0-9].*&apos;， recursive=False)[&apos;1.gif&apos;, &apos;2.txt&apos;]# 绝对路径&gt;&gt;&gt; glob.glob(os.getcwd() + os.sep +&apos;*.txt&apos;, recursive=False)[&apos;D:\\Practice\\2.txt&apos;]&gt;&gt;&gt; glob.glob(os.getcwd() + os.sep +&apos;[0-9].*&apos;, recursive=False)[&apos;D:\\Practice\\1.gif&apos;, &apos;D:\\Practice\\2.txt&apos;]# 若recursive=True，需配合&quot;**&quot;使用&gt;&gt;&gt; glob.glob(&apos;**&apos; + os.sep + &apos;*.txt&apos;, recursive=True)[&apos;2.txt&apos;, &apos;sub\\3.txt&apos;]&gt;&gt;&gt; glob.glob(&apos;**&apos; + os.sep, recursive=True)[&apos;sub\\&apos;]&gt;&gt;&gt; glob.glob(&apos;.&apos; + os.sep + &apos;**&apos; + os.sep, recursive=True)[&apos;.\\&apos;, &apos;.\\sub\\&apos;]注： 在一个较大的目录树中使用 &quot;**&quot; 模式可能会消耗非常多的时间。 glob.iglob(pathname, *, recursive=False)根据路径名匹配模式，返回一个路径名列表的迭代器 escape(pathname)转义所有特殊字符。]]></content>
      <categories>
        <category>python</category>
        <category>module</category>
        <category>glob</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Python Tutorial]]></title>
    <url>%2F2019%2F08%2F02%2Fpython-python3-%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[简介Python 荷兰人 GuidovanRossum 于1989年发明，第一个公开发行版发行于1991年。Python 是纯粹的自由软件，源代码和解释器CPython遵循GPL（GNUGeneralPublicLicense）协议。Python 是跨平台的，可以运行在Windows、Mac和各种Linux/Unix系统上。Python 语法简洁清晰，特色之一是强制用空白符（whitespace）作为语句缩进。Python 提供了非常完善的基础代码库，同时也有大量的第三方库支持。Python 被称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。 Python 特点1、Python 用C语言开发，但无C语言复杂的数据类型，如指针等。2、Python 极易实现面向对象编程。3、Python 代码块使用空格或制表符缩进的方式分隔代码。4、Python 是强类型语言。 Python 应用场景1、Web应用开发2、操作系统管理、服务器运维的自动化脚本3、科学计算4、桌面软件5、服务器软件（网络软件）6、游戏 Python 应用方向1、常规软件开发2、科学计算3、自动化运维4、云计算5、5.WEB开发6、网络爬虫7、数据分析8、人工智能 安装]]></content>
      <categories>
        <category>python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python datetime module]]></title>
    <url>%2F2019%2F08%2F01%2Fpython-module-datetime%2F</url>
    <content type="text"><![CDATA[Introductiondatetime Basic date and time types Source code: Lib/datetime.py The datetime module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation. For related functionality, see also the time and calendar modules. datetime include constants and available types 123&gt;&gt;&gt; import datetime&gt;&gt;&gt; dir(datetime)[&apos;MAXYEAR&apos;, &apos;MINYEAR&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;date&apos;, &apos;datetime&apos;, &apos;datetime_CAPI&apos;, &apos;sys&apos;, &apos;time&apos;, &apos;timedelta&apos;, &apos;timezone&apos;, &apos;tzinfo&apos;] The datetime module constantsdatetime.MINYEARThe smallest year number allowed in a date or datetime object. MINYEAR is 1. datatime.MAXYEARThe largest year number allowed in a date or datetime object. MAXYEAR is 9999. The datetime module available typesclass datetime.timedeltaA duration expressing the difference between two date, time, or datetime instances to microsecond resolution. class datetime.dateAn idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: year, month, and day. class datetime.timeAn idealized time, independent of any particular day, assuming that every day has exactly 246060 seconds (there is no notion of “leap seconds” here). Attributes: hour, minute, second, microsecond, and tzinfo. class datetime.datetimeA combination of a date and a time. Attributes: year, month, day, hour, minute, second, microsecond, and tzinfo. class datetime.tzinfoAn abstract base class for time zone information objects. These are used by the datetime and time classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time). class datetime.timezoneA class that implements the tzinfo abstract base class as a fixed offset from the UTC. timedelta ObjectsA timedelta object represents a duration, the difference between two dates or times. 1class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) All arguments are optional and default to 0. Arguments may be integers or floats, and may be positive or negative. Only days, seconds and microseconds are stored internally. Arguments are converted to those units: A millisecond is converted to 1000 microseconds. A minute is converted to 60 seconds. An hour is converted to 3600 seconds. A week is converted to 7 days. days, seconds and microseconds are then normalized so that the representation is unique, with 0 &lt;= microseconds &lt; 1000000 0 &lt;= seconds &lt; 3600*24 (the number of seconds in one day) -999999999 &lt;= days &lt;= 999999999 1234&gt;&gt;&gt; from datetime import timedelta &gt;&gt;&gt; dir(timedelta)[&apos;__abs__&apos;, &apos;__add__&apos;, &apos;__bool__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__divmod__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__floordiv__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__mod__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__neg__&apos;, &apos;__new__&apos;, &apos;__pos__&apos;, &apos;__radd__&apos;, &apos;__rdivmod__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rfloordiv__&apos;, &apos;__rmod__&apos;, &apos;__rmul__&apos;, &apos;__rsub__&apos;, &apos;__rtruediv__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__sub__&apos;, &apos;__subclasshook__&apos;, &apos;__truediv__&apos;, &apos;days&apos;, &apos;max&apos;, &apos;microseconds&apos;, &apos;min&apos;, &apos;resolution&apos;, &apos;seconds&apos;, &apos;total_seconds&apos;] Class attributestimedelta.minThe most negative timedelta object, timedelta(-999999999). 12&gt;&gt;&gt; timedelta.min datetime.timedelta(days=-999999999) timedelta.maxThe most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999). 12&gt;&gt;&gt; timedelta.max datetime.timedelta(days=999999999, seconds=86399, microseconds=999999) timedelta.resolutionThe smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1). 12&gt;&gt;&gt; timedelta.resolution datetime.timedelta(microseconds=1) Instance attributes (read-only)timedelta.daystimedelta.secondstimedelta.microseconds Attribute Value days Between -999999999 and 999999999 inclusive seconds Between 0 and 86399 inclusive microseconds Between 0 and 999999 inclusive 1234&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; d = timedelta(days=1,seconds=1,microseconds=1) &gt;&gt;&gt; (d.days, d.seconds, d.microseconds)(1, 1, 1) Instance methodstimedelta.total_seconds()Return the total number of seconds contained in the duration. Equivalent to td / timedelta(seconds=1). For interval units other than seconds, use the division form directly (e.g. td / timedelta(microseconds=1)). Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy. Example usage: 1234567891011121314151617181920&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; year = timedelta(days=365)&gt;&gt;&gt; another_year = timedelta(weeks=40, days=84, hours=23, minutes=50, seconds=600)&gt;&gt;&gt; year.total_seconds()31536000.0&gt;&gt;&gt; year == another_yearTrue&gt;&gt;&gt; ten_years = 10 * year&gt;&gt;&gt; ten_yearsdatetime.timedelta(3650)&gt;&gt;&gt; ten_years, ten_years.days // 365(datetime.timedelta(3650), 10)&gt;&gt;&gt; nine_years = ten_years - year&gt;&gt;&gt; nine_years, nine_years.days // 365(datetime.timedelta(3285), 9)&gt;&gt;&gt; three_years = nine_years // 3&gt;&gt;&gt; three_years, three_years.days // 365(datetime.timedelta(1095), 3)&gt;&gt;&gt; abs(three_years - ten_years) == 2 * three_years + yearTrue Supported operations123456789101112131415161718192021222324252627282930&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; t1 = timedelta(days=1,seconds=1,microseconds=1) &gt;&gt;&gt; t2 = timedelta(days=2,seconds=2,microseconds=2) &gt;&gt;&gt; t1 + t2 datetime.timedelta(days=3, seconds=3, microseconds=3)&gt;&gt;&gt; t2 - t1 datetime.timedelta(days=1, seconds=1, microseconds=1)&gt;&gt;&gt; t1 - t2 datetime.timedelta(days=-2, seconds=86398, microseconds=999999)&gt;&gt;&gt; 6 * t1 datetime.timedelta(days=6, seconds=6, microseconds=6)&gt;&gt;&gt; 6.6 * t1 datetime.timedelta(days=6, seconds=51846, microseconds=600007)&gt;&gt;&gt; abs(t1) datetime.timedelta(days=1, seconds=1, microseconds=1)&gt;&gt;&gt; abs(t1 - t2)datetime.timedelta(days=1, seconds=1, microseconds=1)# equivalent to +t when t.days &gt;= 0, and to -t when t.days &lt; 0. (2)&gt;&gt;&gt; str(t1) &apos;1 day, 0:00:01.000001&apos;# Returns a string in the form [D day[s], ][H]H:MM:SS[.UUUUUU], where D is negative for negative t. (5)&gt;&gt;&gt; repr(t1) &apos;datetime.timedelta(days=1, seconds=1, microseconds=1)&apos;# Returns a string representation of the timedelta object as a constructor call with canonical attribute values. In addition to the operations listed above timedelta objects support certain additions and subtractions with date and datetime objects . date ObjectsA date object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions. January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on. 1class datetime.date(year, month, day) All arguments are required. Arguments may be integers, in the following ranges: MINYEAR &lt;= year &lt;= MAXYEAR 1 &lt;= month &lt;= 12 1 &lt;= day &lt;= number of days in the given month and year If an argument outside those ranges is given, ValueError is raised. 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; dir(date)[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__radd__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rsub__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__sub__&apos;, &apos;__subclasshook__&apos;, &apos;ctime&apos;, &apos;day&apos;, &apos;fromisoformat&apos;, &apos;fromordinal&apos;, &apos;fromtimestamp&apos;, &apos;isocalendar&apos;, &apos;isoformat&apos;, &apos;isoweekday&apos;, &apos;max&apos;, &apos;min&apos;, &apos;month&apos;, &apos;replace&apos;, &apos;resolution&apos;, &apos;strftime&apos;, &apos;timetuple&apos;, &apos;today&apos;, &apos;toordinal&apos;, &apos;weekday&apos;, &apos;year&apos;] Class attributesdate.minThe earliest representable date, date(MINYEAR, 1, 1). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.min datetime.date(1, 1, 1) date.maxThe latest representable date, date(MAXYEAR, 12, 31). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.maxdatetime.date(9999, 12, 31) date.resolutionThe smallest possible difference between non-equal date objects, timedelta(days=1). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.resolutiondatetime.timedelta(days=1) Instance attributes (read-only)date.yearBetween MINYEAR and MAXYEAR inclusive. date.monthBetween 1 and 12 inclusive. date.dayBetween 1 and the number of days in the given month of the given year. Class methodsdate.today()Return the current local date. This is equivalent to date.fromtimestamp(time.time()). 123&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.today() datetime.date(2019, 8, 3) date.fromtimestamp(timestamp)Return the local date corresponding to the POSIX timestamp, such as is returned by time.time(). 12345&gt;&gt;&gt; import time&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; date.fromtimestamp(time.time()) datetime.date(2019, 8, 3) date.fromordinal(ordinal)Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. ValueError is raised unless 1 &lt;= ordinal &lt;= date.max.toordinal(). For any date d, date.fromordinal(d.toordinal()) == d. 12345678910&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.fromordinal(1) datetime.date(1, 1, 1)&gt;&gt;&gt; date.fromordinal(31)datetime.date(1, 1, 31)&gt;&gt;&gt; date.fromordinal(35)datetime.date(1, 2, 4) date.fromisoformat(date_string)Return a date corresponding to a date_string in the format emitted by date.isoformat(). Specifically, this function supports strings in the format(s) YYYY-MM-DD. Caution This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of date.isoformat(). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = &quot;2018-10-10&quot;&gt;&gt;&gt; date.fromisoformat(d) datetime.date(2018, 10, 10) Instance methodsdate.replace(year=self.year, month=self.month, day=self.day)Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified. For example 12345678&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10) &gt;&gt;&gt; d.replace(month=12)datetime.date(2018, 12, 10)&gt;&gt;&gt; d.replace(month=12) == date(2018, 12, 10) True date.timetuple()Return a time.struct_time such as returned by time.localtime(). The hours, minutes and seconds are 0, and the DST flag is -1. d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1)), where yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1 is the day number within the current year starting with 1 for January 1st. 12345&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.timetuple() time.struct_time(tm_year=2018, tm_mon=10, tm_mday=10, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=283, tm_isdst=-1) date.toordinal()Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any date object d, date.fromordinal(d.toordinal()) == d. 12345678&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.toordinal() 736977&gt;&gt;&gt; date.fromordinal(d.toordinal()) == dTrue date.weekday()Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example,date(2018, 10, 10).weekday() == 2, a Wednesday. 12345&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.weekday() 2 # is Wednesday date.isoweekday()Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example,date(2018, 10, 10).isoweekday() == 3, a Wednesday 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.isoweekday()3 # is Wednesday date.isocalendar()Return a 3-tuple, (ISO year, ISO week number, ISO weekday). The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year. For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that date(2003, 12, 29).isocalendar() == (2004, 1, 1) and date(2004, 1, 4).isocalendar() == (2004, 1, 7). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2004, 1, 1)&gt;&gt;&gt; d.isocalendar()(2004, 1, 4) date.isoformat()Return a string representing the date in ISO 8601 format, ‘YYYY-MM-DD’. For example 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.isoformat() &apos;2018-10-10&apos; date.__str__()For a date d, str(d) is equivalent to d.isoformat(). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; str(d)&apos;2018-10-10&apos; date.ctime()Return a string representing the date, is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime() function (which time.ctime() invokes, but which date.ctime() does not invoke) conforms to the C standard. 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.ctime() &apos;Wed Oct 10 00:00:00 2018&apos; date.strftime(format)Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values 1234567&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.strftime(&apos;%Y-%m-%d&apos;) &apos;2018-10-10&apos;&gt;&gt;&gt; d.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)&apos;2018-10-10 00:00:00&apos; date.__format__(format)Same as date.strftime(). This makes it possible to specify a format string for a date object in formatted string literals and when using str.format(). Supported operations1234567891011121314151617181920&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; d1 = date(2018, 10, 10) &gt;&gt;&gt; d2 = date(2019, 11, 11)&gt;&gt;&gt; day = timedelta(days=15)&gt;&gt;&gt; d2 - d1datetime.timedelta(days=397)&gt;&gt;&gt; d1 - d2 datetime.timedelta(days=-397)&gt;&gt;&gt; d1 &lt; d2True&gt;&gt;&gt; d1 + day datetime.date(2018, 10, 25)&gt;&gt;&gt; d2 - day datetime.date(2019, 10, 27) time ObjectsA time object represents a (local) time of day, independent of any particular day, and subject to adjustment via a tzinfo object. 1class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be integers, in the following ranges: 0 &lt;= hour &lt; 24, 0 &lt;= minute &lt; 60, 0 &lt;= second &lt; 60, 0 &lt;= microsecond &lt; 1000000, fold in [0, 1]. If an argument outside those ranges is given,ValueError is raised. All default to 0 except tzinfo, which defaults to None. 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; dir(time)[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;dst&apos;, &apos;fold&apos;, &apos;fromisoformat&apos;, &apos;hour&apos;, &apos;isoformat&apos;, &apos;max&apos;, &apos;microsecond&apos;, &apos;min&apos;, &apos;minute&apos;, &apos;replace&apos;, &apos;resolution&apos;, &apos;second&apos;, &apos;strftime&apos;, &apos;tzinfo&apos;, &apos;tzname&apos;, &apos;utcoffset&apos;] Class attributestime.minThe earliest representable time, time(0, 0, 0, 0). 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.min datetime.time(0, 0) time.maxThe latest representable time, time(23, 59, 59, 999999). 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.max datetime.time(23, 59, 59, 999999) time.resolutionThe smallest possible difference between non-equal time objects, timedelta(microseconds=1), although note that arithmetic on time objects is not supported. 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.resolution datetime.timedelta(microseconds=1) Instance attributestime.hourIn range(24). time.minuteIn range(60). time.secondIn range(60). time.microsecondIn range(1000000). time.tzinfoThe object passed as the tzinfo argument to the time constructor, or None if none was passed. time.foleIn [0, 1]. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation. 12345&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; t = time(10, 23, 56)&gt;&gt;&gt; t.hour, t.minute, t.second, t.microsecond, t.tzinfo, t.fold (10, 23, 56, 0, None, 0) Class methodstime.fromisoformat(time_sting)Return a time corresponding to a time_string in one of the formats emitted by time.isoformat(). Specifically, this function supports strings in the format(s) HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]. Instance methodstime.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)Return a time with the same value, except for those attributes given new values by whichever keyword arguments are specified. Note that tzinfo=None can be specified to create a naive time from an aware time, without conversion of the time data. New in version 3.6: Added the fold argument. time.isoformat(timespec=’auto’)Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if microsecond is 0, HH:MM:SS If utcoffset() does not return None, a string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]]. The optional argument timespec specifies the number of additional components of the time to include (the default is ‘auto’). It can be one of the following: ‘auto’: Same as ‘seconds’ if microsecond is 0, same as ‘microseconds’ otherwise. ‘hours’: Include the hour in the two-digit HH format. ‘minutes’: Include hour and minute in HH:MM format. ‘seconds’: Include hour, minute, and second in HH:MM:SS format. ‘milliseconds’: Include full time, but truncate fractional second part to milliseconds. HH:MM:SS.sss format. ‘microseconds’: Include full time in HH:MM:SS.ffffff format. ValueError will be raised on an invalid timespec argument. 12345678910111213&gt;&gt;&gt; from datetime import time &gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=123456) &gt;&gt;&gt; t.isoformat() &apos;12:34:56.123456&apos;&gt;&gt;&gt; t.isoformat(timespec=&apos;minutes&apos;) &apos;12:34&apos;&gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=0) &gt;&gt;&gt; t.isoformat(timespec=&apos;microseconds&apos;) &apos;12:34:56.000000&apos;&gt;&gt;&gt; t.isoformat(timespec=&apos;auto&apos;) &apos;12:34:56&apos; time.str()For a time t, str(t) is equivalent to t.isoformat(). time.strftime(format)Return a string representing the time, controlled by an explicit format string. 12345&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=0)&gt;&gt;&gt; t.strftime(&apos;%H:%M:%S&apos;) &apos;12:34:56&apos; time.__format__(format)Same as time.strftime(). This makes it possible to specify a format string for a time object in formatted string literals and when using str.format(). time.utcoffset()If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(None), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes. time.dst()If tzinfo is None, returns None, else returns self.tzinfo.dst(None), and raises an exception if the latter doesn’t return None, or a timedelta object with magnitude less than one day. Changed in version 3.7: The DST offset is not restricted to a whole number of minutes. time.tzname()If tzinfo is None, returns None, else returns self.tzinfo.tzname(None), or raises an exception if the latter doesn’t return None or a string object. 123456789101112131415161718192021222324&gt;&gt;&gt; from datetime import time, tzinfo, timedelta&gt;&gt;&gt; class TZ1(tzinfo):... def utcoffset(self, dt):... return timedelta(hours=1)... def dst(self, dt):... return timedelta(0)... def tzname(self,dt):... return &quot;+01:00&quot;... def __repr__(self):... return f&quot;&#123;self.__class__.__name__&#125;()&quot;...&gt;&gt;&gt; t = time(12, 10, 30, tzinfo=TZ1())&gt;&gt;&gt; tdatetime.time(12, 10, 30, tzinfo=TZ1())&gt;&gt;&gt; t.isoformat()&apos;12:10:30+01:00&apos;&gt;&gt;&gt; t.dst()datetime.timedelta(0)&gt;&gt;&gt; t.tzname()&apos;+01:00&apos;&gt;&gt;&gt; t.strftime(&quot;%H:%M:%S %Z&quot;)&apos;12:10:30 +01:00&apos;&gt;&gt;&gt; &apos;The &#123;&#125; is &#123;:%H:%M&#125;.&apos;.format(&quot;time&quot;, t)&apos;The time is 12:10.&apos; datetime ObjectsA datetime object is a single object containing all the information from a date object and a time object. Like a date object, datetime assumes the current Gregorian calendar extended in both directions; like a time object, datetime assumes there are exactly 3600*24 seconds in every day. 1class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be integers, in the following ranges: MINYEAR &lt;= year &lt;= MAXYEAR, 1 &lt;= month &lt;= 12, 1 &lt;= day &lt;= number of days in the given month and year, 0 &lt;= hour &lt; 24, 0 &lt;= minute &lt; 60, 0 &lt;= second &lt; 60, 0 &lt;= microsecond &lt; 1000000, fold in [0, 1]. If an argument outside those ranges is given, ValueError is raised. New in version 3.6: Added the fold argument. 1234&gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; dir(datetime) [&apos;__add__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__radd__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rsub__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__sub__&apos;, &apos;__subclasshook__&apos;, &apos;astimezone&apos;, &apos;combine&apos;, &apos;ctime&apos;, &apos;date&apos;, &apos;day&apos;, &apos;dst&apos;, &apos;fold&apos;, &apos;fromisoformat&apos;, &apos;fromordinal&apos;, &apos;fromtimestamp&apos;, &apos;hour&apos;, &apos;isocalendar&apos;, &apos;isoformat&apos;, &apos;isoweekday&apos;, &apos;max&apos;, &apos;microsecond&apos;, &apos;min&apos;, &apos;minute&apos;, &apos;month&apos;, &apos;now&apos;, &apos;replace&apos;, &apos;resolution&apos;, &apos;second&apos;, &apos;strftime&apos;, &apos;strptime&apos;, &apos;time&apos;, &apos;timestamp&apos;, &apos;timetuple&apos;, &apos;timetz&apos;, &apos;today&apos;, &apos;toordinal&apos;, &apos;tzinfo&apos;, &apos;tzname&apos;, &apos;utcfromtimestamp&apos;, &apos;utcnow&apos;, &apos;utcoffset&apos;, &apos;utctimetuple&apos;, &apos;weekday&apos;, &apos;year&apos;] Class attributesdatetime.minThe earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None). datetime.maxThe latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None). datetime.resolutionThe smallest possible difference between non-equal datetime objects, timedelta(microseconds=1). Instance attributes (read-only)datetime.yearBetween MINYEAR and MAXYEAR inclusive. datetime.monthBetween 1 and 12 inclusive. datetime.dayBetween 1 and the number of days in the given month of the given year. datetime.hourIn range(24). datetime.minuteIn range(60). datetime.secondIn range(60). datetime.microsecondIn range(1000000). datetime.tzinfoThe object passed as the tzinfo argument to the datetime constructor, or None if none was passed. datetime.foldIn [0, 1]. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation. Class methodsdatetime.today()Return the current local datetime, with tzinfo None. This is equivalent to datetime.fromtimestamp(time.time()). 123&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; datetime.today()datetime.datetime(2019, 8, 3, 23, 38, 14, 444364) datetime.now(tz=None)Return the current local date and time. If optional argument tz is None or not specified, this is like today(), but, if possible, supplies more precision than can be gotten from going through a time.time() timestamp (for example, this may be possible on platforms supplying the C gettimeofday() function). If tz is not None, it must be an instance of a tzinfo subclass, and the current date and time are converted to tz’s time zone. In this case the result is equivalent to tz.fromutc(datetime.utcnow().replace(tzinfo=tz)). datetime.utcnow()Return the current UTC date and time, with tzinfo None. This is like now(), but returns the current UTC date and time, as a naive datetime object. An aware current UTC datetime can be obtained by calling datetime.now(timezone.utc). See also now(). datetime.fromtimestamp(timestamp, tz=None)Return the local date and time corresponding to the POSIX timestamp, such as is returned by time.time(). If optional argument tz is None or not specified, the timestamp is converted to the platform’s local date and time, and the returned datetime object is naive. If tz is not None, it must be an instance of a tzinfo subclass, and the timestamp is converted to tz’s time zone. In this case the result is equivalent to tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz)). datetime.utcfromtimestamp(timestamp)Return the UTC datetime corresponding to the POSIX timestamp, with tzinfo None. This may raise OverflowError, if the timestamp is out of the range of values supported by the platform C gmtime() function, and OSError on gmtime() failure. It’s common for this to be restricted to years in 1970 through 2038. datetime.fromordinal(ordinal)Return the datetime corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. ValueError is raised unless 1 &lt;= ordinal &lt;= datetime.max.toordinal(). The hour, minute, second and microsecond of the result are all 0, and tzinfo is None. datetime.combine(date, time, tzinfo=self.tzinfo)Return a new datetime object whose date components are equal to the given date object’s, and whose time components are equal to the given time object’s. If the tzinfo argument is provided, its value is used to set the tzinfo attribute of the result, otherwise the tzinfo attribute of the time argument is used. For any datetime object d, d == datetime.combine(d.date(), d.time(), d.tzinfo). If date is a datetime object, its time components and tzinfo attributes are ignored. Changed in version 3.6: Added the tzinfo argument. datetime.fromisoformat(date_string)Return a datetime corresponding to a date_string in one of the formats emitted by date.isoformat() and datetime.isoformat(). Specifically, this function supports strings in the format(s) YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]], where * can match any single character. datetime.strptime(date_string, format)Return a datetime corresponding to date_string, parsed according to format. This is equivalent to datetime(*(time.strptime(date_string, format)[0:6])). ValueError is raised if the date_string and format can’t be parsed by time.strptime() or if it returns a value which isn’t a time tuple. For a complete list of formatting directives, see strftime() and strptime() Behavior. Instance methodsdatetime.date()Return date object with same year, month and day. datetime.time()Return time object with same hour, minute, second, microsecond and fold. tzinfo is None. See also method timetz(). Changed in version 3.6: The fold value is copied to the returned time object. datetime.timetz()Return time object with same hour, minute, second, microsecond, fold, and tzinfo attributes. See also method time(). Changed in version 3.6: The fold value is copied to the returned time object. datetime.replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)Return a datetime with the same attributes, except for those attributes given new values by whichever keyword arguments are specified. Note that tzinfo=None can be specified to create a naive datetime from an aware datetime with no conversion of date and time data. New in version 3.6: Added the fold argument. datetime.astimezone(tz=None)Return a datetime object with new tzinfo attribute tz, adjusting the date and time data so the result is the same UTC time as self, but in tz’s local time. If provided, tz must be an instance of a tzinfo subclass, and its utcoffset() and dst() methods must not return None. If self is naive, it is presumed to represent time in the system timezone. datetime.utcoffset()If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(self), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes. datetime.dst()If tzinfo is None, returns None, else returns self.tzinfo.dst(self), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. Changed in version 3.7: The DST offset is not restricted to a whole number of minutes. datetime.tzname()If tzinfo is None, returns None, else returns self.tzinfo.tzname(self), raises an exception if the latter doesn’t return None or a string object, datetime.timetuple()Return a time.struct_time such as returned by time.localtime(). d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst)), where yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1 is the day number within the current year starting with 1 for January 1st. The tm_isdst flag of the result is set according to the dst() method: tzinfo is None or dst() returns None, tm_isdst is set to -1; else if dst() returns a non-zero value, tm_isdst is set to 1; else tm_isdst is set to 0. datetime.utctimetuple()If datetime instance d is naive, this is the same as d.timetuple() except that tm_isdst is forced to 0 regardless of what d.dst() returns. DST is never in effect for a UTC time. If d is aware, d is normalized to UTC time, by subtracting d.utcoffset(), and a time.struct_time for the normalized time is returned. tm_isdst is forced to 0. Note that an OverflowError may be raised if d.year was MINYEAR or MAXYEAR and UTC adjustment spills over a year boundary. datetime.toordinal()Return the proleptic Gregorian ordinal of the date. The same as self.date().toordinal(). datetime.timestamp()Return POSIX timestamp corresponding to the datetime instance. The return value is a float similar to that returned by time.time(). Naive datetime instances are assumed to represent local time and this method relies on the platform C mktime() function to perform the conversion. Since datetime supports wider range of values than mktime() on many platforms, this method may raise OverflowError for times far in the past or far in the future. datetime.weekday()Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as self.date().weekday(). See also isoweekday(). datetime.isoweekday()Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as self.date().isoweekday(). See also weekday(), isocalendar(). datetime.isocalendar()Return a 3-tuple, (ISO year, ISO week number, ISO weekday). The same as self.date().isocalendar(). datetime.isoformat(sep=’T’, timespec=’auto’)Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.ffffff or, if microsecond is 0, YYYY-MM-DDTHH:MM:SS If utcoffset() does not return None, a string is appended, giving the UTC offset: YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]. The optional argument sep (default ‘T’) is a one-character separator, placed between the date and time portions of the result. For example, 123456&gt;&gt;&gt; from datetime import tzinfo, timedelta, datetime&gt;&gt;&gt; class TZ(tzinfo):... def utcoffset(self, dt): return timedelta(minutes=-399)...&gt;&gt;&gt; datetime(2002, 12, 25, tzinfo=TZ()).isoformat(&apos; &apos;)&apos;2002-12-25 00:00:00-06:39&apos; The optional argument timespec specifies the number of additional components of the time to include (the default is ‘auto’). It can be one of the following: ‘auto’: Same as ‘seconds’ if microsecond is 0, same as ‘microseconds’ otherwise. ‘hours’: Include the hour in the two-digit HH format. ‘minutes’: Include hour and minute in HH:MM format. ‘seconds’: Include hour, minute, and second in HH:MM:SS format. ‘milliseconds’: Include full time, but truncate fractional second part to milliseconds. HH:MM:SS.sss format. ‘microseconds’: Include full time in HH:MM:SS.ffffff format. ValueError will be raised on an invalid timespec argument. 123456&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; datetime.now().isoformat(timespec=&apos;minutes&apos;) # doctest: +SKIP&apos;2002-12-25T00:00&apos;&gt;&gt;&gt; dt = datetime(2015, 1, 1, 12, 30, 59, 0)&gt;&gt;&gt; dt.isoformat(timespec=&apos;microseconds&apos;)&apos;2015-01-01T12:30:59.000000&apos; datetime.str()For a datetime instance d, str(d) is equivalent to d.isoformat(‘ ‘). datetime.ctime()Return a string representing the date and time, for example datetime(2002, 12, 4, 20, 30, 40).ctime() == ‘Wed Dec 4 20:30:40 2002’. d.ctime() is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime() function (which time.ctime() invokes, but which datetime.ctime() does not invoke) conforms to the C standard. datetime.strftime(format)Return a string representing the date and time, controlled by an explicit format string. For a complete list of formatting directives, see strftime() and strptime() Behavior. datetime.format(format)Same as datetime.strftime(). This makes it possible to specify a format string for a datetime object in formatted string literals and when using str.format(). For a complete list of formatting directives, see strftime() and strptime() Behavior. Examples of working with datetime objects: 123456789101112131415161718192021222324252627282930313233343536373839404142&gt;&gt;&gt; from datetime import datetime, date, time&gt;&gt;&gt; # Using datetime.combine()&gt;&gt;&gt; d = date(2005, 7, 14)&gt;&gt;&gt; t = time(12, 30)&gt;&gt;&gt; datetime.combine(d, t)datetime.datetime(2005, 7, 14, 12, 30)&gt;&gt;&gt; # Using datetime.now() or datetime.utcnow()&gt;&gt;&gt; datetime.now() datetime.datetime(2007, 12, 6, 16, 29, 43, 79043) # GMT +1&gt;&gt;&gt; datetime.utcnow() datetime.datetime(2007, 12, 6, 15, 29, 43, 79060)&gt;&gt;&gt; # Using datetime.strptime()&gt;&gt;&gt; dt = datetime.strptime(&quot;21/11/06 16:30&quot;, &quot;%d/%m/%y %H:%M&quot;)&gt;&gt;&gt; dtdatetime.datetime(2006, 11, 21, 16, 30)&gt;&gt;&gt; # Using datetime.timetuple() to get tuple of all attributes&gt;&gt;&gt; tt = dt.timetuple()&gt;&gt;&gt; for it in tt: ... print(it)...2006 # year11 # month21 # day16 # hour30 # minute0 # second1 # weekday (0 = Monday)325 # number of days since 1st January-1 # dst - method tzinfo.dst() returned None&gt;&gt;&gt; # Date in ISO format&gt;&gt;&gt; ic = dt.isocalendar()&gt;&gt;&gt; for it in ic: ... print(it)...2006 # ISO year47 # ISO week2 # ISO weekday&gt;&gt;&gt; # Formatting datetime&gt;&gt;&gt; dt.strftime(&quot;%A, %d. %B %Y %I:%M%p&quot;)&apos;Tuesday, 21. November 2006 04:30PM&apos;&gt;&gt;&gt; &apos;The &#123;1&#125; is &#123;0:%d&#125;, the &#123;2&#125; is &#123;0:%B&#125;, the &#123;3&#125; is &#123;0:%I:%M%p&#125;.&apos;.format(dt, &quot;day&quot;, &quot;month&quot;, &quot;time&quot;)&apos;The day is 21, the month is November, the time is 04:30PM.&apos; Using datetime with tzinfo: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&gt;&gt;&gt; from datetime import timedelta, datetime, tzinfo, timezone&gt;&gt;&gt; class KabulTz(tzinfo):... # Kabul used +4 until 1945, when they moved to +4:30... UTC_MOVE_DATE = datetime(1944, 12, 31, 20, tzinfo=timezone.utc)... def utcoffset(self, dt):... if dt.year &lt; 1945:... return timedelta(hours=4)... elif (1945, 1, 1, 0, 0) &lt;= dt.timetuple()[:5] &lt; (1945, 1, 1, 0, 30):... # If dt falls in the imaginary range, use fold to decide how... # to resolve. See PEP495... return timedelta(hours=4, minutes=(30 if dt.fold else 0))... else:... return timedelta(hours=4, minutes=30)...... def fromutc(self, dt):... # A custom implementation is required for fromutc as... # the input to this function is a datetime with utc values... # but with a tzinfo set to self... # See datetime.astimezone or fromtimestamp...... # Follow same validations as in datetime.tzinfo... if not isinstance(dt, datetime):... raise TypeError(&quot;fromutc() requires a datetime argument&quot;)... if dt.tzinfo is not self:... raise ValueError(&quot;dt.tzinfo is not self&quot;)...... if dt.replace(tzinfo=timezone.utc) &gt;= self.UTC_MOVE_DATE:... return dt + timedelta(hours=4, minutes=30)... else:... return dt + timedelta(hours=4)...... def dst(self, dt):... return timedelta(0)...... def tzname(self, dt):... if dt &gt;= self.UTC_MOVE_DATE:... return &quot;+04:30&quot;... else:... return &quot;+04&quot;...... def __repr__(self):... return f&quot;&#123;self.__class__.__name__&#125;()&quot;...&gt;&gt;&gt; tz1 = KabulTz()&gt;&gt;&gt; # Datetime before the change&gt;&gt;&gt; dt1 = datetime(1900, 11, 21, 16, 30, tzinfo=tz1)&gt;&gt;&gt; print(dt1.utcoffset())4:00:00&gt;&gt;&gt; # Datetime after the change&gt;&gt;&gt; dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=tz1)&gt;&gt;&gt; print(dt2.utcoffset())4:30:00&gt;&gt;&gt; # Convert datetime to another time zone&gt;&gt;&gt; dt3 = dt2.astimezone(timezone.utc)&gt;&gt;&gt; dt3datetime.datetime(2006, 6, 14, 8, 30, tzinfo=datetime.timezone.utc)&gt;&gt;&gt; dt2datetime.datetime(2006, 6, 14, 13, 0, tzinfo=KabulTz())&gt;&gt;&gt; dt2.utctimetuple() == dt3.utctimetuple()True tzinfo Objects1class datetime.tzinfo 12345&gt;&gt;&gt; from datetime import tzinfo &gt;&gt;&gt; dir(tzinfo) [&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;dst&apos;, &apos;fromutc&apos;, &apos;tzname&apos;, &apos;utcoffset&apos;] 123456789101112131415161718192021222324252627282930Help on class tzinfo in module datetime:class tzinfo(builtins.object) | Abstract base class for time zone info objects. | | Methods defined here: | | __getattribute__(self, name, /) | Return getattr(self, name). | | __reduce__(...) | -&gt; (cls, state) | | dst(...) | datetime -&gt; DST offset as timedelta positive east of UTC. | | fromutc(...) | datetime in UTC -&gt; datetime in local time. | | tzname(...) | datetime -&gt; string name of time zone. | | utcoffset(...) | datetime -&gt; timedelta showing offset from UTC, negative values indicating West of UTC | | ---------------------------------------------------------------------- | Static methods defined here: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. timezone ObjectsThe timezone class is a subclass of tzinfo, each instance of which represents a timezone defined by a fixed offset from UTC. Note that objects of this class cannot be used to represent timezone information in the locations where different offsets are used in different days of the year or where historical changes have been made to civil time. 1class datetime.timezone(offset, name=None) The offset argument must be specified as a timedelta object representing the difference between the local time and UTC. It must be strictly between -timedelta(hours=24) and timedelta(hours=24), otherwise ValueError is raised. The name argument is optional. If specified it must be a string that will be used as the value returned by the datetime.tzname() method. 1234&gt;&gt;&gt; from datetime import timezone &gt;&gt;&gt; dir(timezone) [&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getinitargs__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;dst&apos;, &apos;fromutc&apos;, &apos;max&apos;, &apos;min&apos;, &apos;tzname&apos;, &apos;utc&apos;, &apos;utcoffset&apos;] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677Help on class timezone in module datetime:class timezone(tzinfo) | Fixed offset from UTC implementation of tzinfo. | | Method resolution order: | timezone | tzinfo | builtins.object | | Methods defined here: | | __eq__(self, value, /) | Return self==value. | | __ge__(self, value, /) | Return self&gt;=value. | | __getinitargs__(...) | pickle support | | __gt__(self, value, /) | Return self&gt;value. | | __hash__(self, /) | Return hash(self). | | __le__(self, value, /) | Return self&lt;=value. | | __lt__(self, value, /) | Return self&lt;value. | | __ne__(self, value, /) | Return self!=value. | | __repr__(self, /) | Return repr(self). | | __str__(self, /) | Return str(self). | | dst(...) | Return None. | | fromutc(...) | datetime in UTC -&gt; datetime in local time. | | tzname(...) | If name is specified when timezone is created, returns the name. Otherwise returns offset as &apos;UTC(+|-)HH:MM&apos;. | | utcoffset(...) | Return fixed offset. | | ---------------------------------------------------------------------- | Static methods defined here: | | __new__(*args, **kwargs) from builtins.type | Create and return a new object. See help(type) for accurate signature. | | ---------------------------------------------------------------------- | Data and other attributes defined here: | | max = datetime.timezone(datetime.timedelta(seconds=86340)) | | min = datetime.timezone(datetime.timedelta(days=-1, seconds=60)) | | utc = datetime.timezone.utc | | ---------------------------------------------------------------------- | Methods inherited from tzinfo: | | __getattribute__(self, name, /) | Return getattr(self, name). | | __reduce__(...) | -&gt; (cls, state) Appendix1234567891011121314151617181920212223格式 说明%a 显示简化星期名称%A 显示完整星期名称%b 显示简化月份名称%B 显示完整月份名称%c 本地相应的日期和时间表示%d 显示当月第几天%H 按24小时制显示小时%I 按12小时制显示小时%j 显示当年第几天%m 显示月份%M 显示分钟数）%p 本地am或者pm的相应符%S 显示秒数）%U 一年中的星期数%w 显示在星期中的第几天，默认从0开始表示周一%W 和%U基本相同%x 本地相应日期%X 本地相应时间%y 去掉世纪的年份（00 - 99）%Y 完整的年份%Z 时区的名字（如果不存在为空字符）%% ‘%’字符 summary123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251NAME datetime - Fast implementation of the datetime type.CLASSES builtins.object date datetime time timedelta tzinfo timezone class date(builtins.object) date(year, month, day) --&gt; date object td = date(year=2018, month=10, day=10) # td is instance of date Instance Methods defined here: ctime() # Return ctime() style string. isocalendar() # Return a 3-tuple containing ISO year, week number, and weekday. isoformat() # Return string in ISO 8601 format, YYYY-MM-DD. isoweekday() # Return the day of the week represented by the date. Monday == 1 ... Sunday == 7 replace(year=self.year, month=self.month, day=self.day) # Return date with new specified fields. strftime(format) # format -&gt; strftime() style string. timetuple() # Return time tuple, compatible with time.localtime(). toordinal() # Return proleptic Gregorian ordinal. January 1 of year 1 is day 1. weekday() # Return the day of the week represented by the date. Monday == 0 ... Sunday == 6 Class methods defined here: fromisoformat(date_string) from builtins.type str -&gt; Construct a date from the output of date.isoformat() fromordinal(ordinal) from builtins.type int -&gt; date corresponding to a proleptic Gregorian ordinal. fromtimestamp(timestamp) from builtins.type timestamp -&gt; local date from a POSIX timestamp (like time.time()). today() from builtins.type Current date or datetime: same as self.__class__.fromtimestamp(time.time()). Data descriptors defined here: day month year Data and other attributes defined here: max = datetime.date(9999, 12, 31) min = datetime.date(1, 1, 1) resolution = datetime.timedelta(days=1) class datetime(date) datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]) The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints. Method resolution order: datetime date builtins.object Instance Methods defined here: astimezone(tz=None) # tz -&gt; convert to local time in new timezone tz ctime() # Return ctime() style string. date() # Return date object with same year, month and day. dst() # Return self.tzinfo.dst(self). isoformat(sep=’T’, timespec=’auto’) [sep] -&gt; string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM]. sep is used to separate the year from the time, and defaults to &apos;T&apos;. timespec specifies what components of the time to include (allowed values are &apos;auto&apos;, &apos;hours&apos;, &apos;minutes&apos;, &apos;seconds&apos;, &apos;milliseconds&apos;, and &apos;microseconds&apos;). replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0) Return datetime with new specified fields. time() # Return time object with same time but with tzinfo=None. timestamp() # Return POSIX timestamp as float. timetuple() # Return time tuple, compatible with time.localtime(). timetz() # Return time object with same time and tzinfo. tzname() # Return self.tzinfo.tzname(self). utcoffset() # Return self.tzinfo.utcoffset(self). utctimetuple() # Return UTC time tuple, compatible with time.localtime(). Class methods defined here: combine(date, time, tzinfo=self.tzinfo) from builtins.type date, time -&gt; datetime with same date and time fields fromisoformat(date_string) from builtins.type string -&gt; datetime from datetime.isoformat() output fromtimestamp(timestamp, tz=None) from builtins.type timestamp[, tz] -&gt; tz&apos;s local time from POSIX timestamp. timestamp is &apos;datetime.datetime&apos; object now(tz=None) from builtins.type Returns new datetime object representing current time local to tz. tz Timezone object. If no tz is specified, uses local timezone. strptime(date_string, format) from builtins.type date_string, format -&gt; new datetime parsed from a string (like time.strptime()). utcfromtimestamp(timestamp) from builtins.type Construct a naive UTC datetime from a POSIX timestamp. utcnow() from builtins.type Return a new datetime representing UTC day and time. Data descriptors defined here: fold hour microsecond minute second tzinfo Data and other attributes defined here: max = datetime.datetime(9999, 12, 31, 23, 59, 59, 999999) min = datetime.datetime(1, 1, 1, 0, 0) resolution = datetime.timedelta(microseconds=1) Methods inherited from date: isocalendar() # Return a 3-tuple containing ISO year, week number, and weekday. isoweekday() Return the day of the week represented by the date. Monday == 1 ... Sunday == 7 strftime(format) format -&gt; strftime() style string. toordinal() Return proleptic Gregorian ordinal. January 1 of year 1 is day 1. weekday() Return the day of the week represented by the date. Monday == 0 ... Sunday == 6 Class methods inherited from date: fromordinal(ordinal) from builtins.type int -&gt; date corresponding to a proleptic Gregorian ordinal. today() from builtins.type Current date or datetime: same as self.__class__.fromtimestamp(time.time()). Data descriptors inherited from date: day month year class time(builtins.object) time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints. Methods defined here: dst() # Return self.tzinfo.dst(self). isoformat(timespec=’auto’) Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM]. timespec specifies what components of the time to include. replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0) Return time with new specified fields. strftime(format) format -&gt; strftime() style string. tzname() Return self.tzinfo.tzname(self). utcoffset() Return self.tzinfo.utcoffset(self). Class methods defined here: fromisoformat(time_string) from builtins.type string -&gt; time from time.isoformat() output Data descriptors defined here: fold hour microsecond minute second tzinfo Data and other attributes defined here: max = datetime.time(23, 59, 59, 999999) min = datetime.time(0, 0) resolution = datetime.timedelta(microseconds=1) class timedelta(builtins.object) Difference between two datetime values. Methods defined here: total_seconds() Total seconds in the duration. Data descriptors defined here: days # Number of days. microseconds # Number of microseconds (&gt;= 0 and less than 1 second). seconds # Number of seconds (&gt;= 0 and less than 1 day). Data and other attributes defined here: max = datetime.timedelta(days=999999999, seconds=86399, microseconds=9... min = datetime.timedelta(days=-999999999) resolution = datetime.timedelta(microseconds=1) class timezone(tzinfo) Fixed offset from UTC implementation of tzinfo. Method resolution order: timezone tzinfo builtins.object Methods defined here: dst() # Return None. fromutc() # datetime in UTC -&gt; datetime in local time. tzname(...) If name is specified when timezone is created, returns the name. Otherwise returns offset as &apos;UTC(+|-) HH:MM&apos;. utcoffset(...) Return fixed offset. Data and other attributes defined here: max = datetime.timezone(datetime.timedelta(seconds=86340)) min = datetime.timezone(datetime.timedelta(days=-1, seconds=60)) utc = datetime.timezone.utc class tzinfo(builtins.object) Abstract base class for time zone info objects. Methods defined here: dst(...) datetime -&gt; DST offset as timedelta positive east of UTC. fromutc(...) datetime in UTC -&gt; datetime in local time. tzname(...) datetime -&gt; string name of time zone. utcoffset(...) datetime -&gt; timedelta showing offset from UTC, negative values indicating West of UTCDATA MAXYEAR = 9999 MINYEAR = 1 datetime_CAPI = &lt;capsule object &quot;datetime.datetime_CAPI&quot;&gt;]]></content>
      <categories>
        <category>python</category>
        <category>module</category>
        <category>datetime</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 安装ssh以及ssh用法与免密登录]]></title>
    <url>%2F2019%2F07%2F31%2FLinux-linux-%E5%AE%89%E8%A3%85ssh%E4%BB%A5%E5%8F%8Assh%E7%94%A8%E6%B3%95%E4%B8%8E%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[ssh 简述SSH ( Secure Shell) 由 IETF 的网络工作小组（Network Working Group）所制定； SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。其是建立在应用层和传输层基础上的安全协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。 SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。 SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。 ssh 安装命令： yum install -y openssh-server openssh-clients 启动ssh： service sshd start 或 /etc/init.d/sshd start 配置开机启动： chkconfig –level 2345 sshd on 配置hosts文件编辑 /etc/hosts文件，在文件尾部添加： ​ IP hostname ​ 例： ​ 192.168.10.10 linux ssh免密登录生成密钥命令：ssh-keygen -t rsa 注：上述操作后一路回车，生成之后会在用户的根目录生成一个 “.ssh”的文件夹。 123456789101112131415161718192021[root@hadoop-centos-01 bin]# ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:cvRFrezrrpzUxZiHr7oufeyNJZGRimjVd1QV7TYTF9c root@hadoop-centos-01The key&apos;s randomart image is:+---[RSA 2048]----+| ...+X|| . . o..E|| o ..=...o|| + o +oO oo|| + S o.* +.o|| . o ..= || ...o.o || .o..+* || oBO* . |+----[SHA256]-----+ 12[root@hadoop-centos-01 opt]# cd ; ll -al | grep .sshdrwx------. 2 root root 80 May 12 22:25 .ssh .ssh 目录包含文件： 123456[root@hadoop-centos-01 .ssh]# ll -ltotal 16-rw-------. 1 root root 1613 May 12 22:30 authorized_keys-rw-------. 1 root root 1675 Aug 1 07:37 id_rsa-rw-r--r--. 1 root root 403 Aug 1 07:37 id_rsa.pub-rw-r--r--. 1 root root 919 May 13 06:54 known_hosts authorized_keys: 存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥 id_rsa : 生成的私钥文件 id_rsa.pub ： 生成的公钥文件 know_hosts : 已知的主机公钥清单 注： ​ 如果希望ssh公钥生效需满足至少下面两个条件： 1) .ssh目录的权限必须是700 2) .ssh/authorized_keys文件权限必须是600 设置免密登录通过ssh-copy-id的方式命令： ssh-copy-id -i ~/.ssh/id_rsa.pub [ip/hosts] 通过scp将内容写到对方的文件中命令：scp -p ~/.ssh/id_rsa.pub root@:/root/.ssh/authorized_keys]]></content>
      <categories>
        <category>Linux</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora简单教程]]></title>
    <url>%2F2019%2F07%2F29%2FTypora%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[序言Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。 基本操作内容目录 语法 1[toc] 标题 语法 123456# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 引用 语法 123&gt; 引用内容1&gt; 引用内容2&gt;&gt; 引用内容3 效果 引用内容1 引用内容2 引用内容3 代码单行代码 语法 1`String str1 = &quot;hello&quot;;` 效果 string str1 = &quot;hello world&quot;; 多行代码 语法 1~~~ Language 效果 12int a = 10;int b = 20; 列表无序列表 语法 123* 无序列表1+ 无序列表2- 无序列表3 效果 无序列表1 无序列表2 无序列表3 多行无需列表 语法 123* 多行无序列表1TAB * 多行无序列表2TAB TAB * 多行无序列表3 效果 多行无序列表1 多行无序列表2 多行无序列表3 有序列表 语法 1231. 有序列表12. 有序列表23. 有序列表3 效果 有序列表1 有序列表2 有序列表3 多行有序列表 语法 12345671. 多行有序列表12. 多行有序列表2 1. 多行有序列表2-1 2. 多行有序列表2-23. 多行有序列表3 1. 多行有序列表3-1 2. 多行有序列表3-2 效果 多行有序列表1 多行有序列表2 多行有序列表2-1 多行有序列表2-2 多行有序列表3 多行有序列表3-1 多行有序列表3-2 任务列表 语法 123-[ ] 抽烟-[x] 喝酒-[ ] 烫头 效果 -[ ] 抽烟-[x] 喝酒-[ ] 烫头 表格 语法 12345|姓名|性别|年龄|手机号||:---|:--:|:--:|---:||张三|男|21|18975346876||李四|女|23|17789548964||王五|男|25|15876513546| 效果 姓名 性别 年龄 手机号 张三 男 21 18975346876 李四 女 23 17789548964 王五 男 25 15876513546 链接图片 语法1（本地图片） 1[图片上传失败...(image-61fd19-1520850984854)] 语法2（网络图片） 1![typora.jpg(https://uploadimages.jianshu.io/upload_images/1538862d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 超链接 语法1（行内式链接） 12[百度][https://www.baidu.com/][百度](https://www.baidu.com/) 效果 [百度][https://www.baidu.com/ ]百度 语法2（参考式链接） 12[CSDN][CSDN网址][CSDN网址]:https://www.csdn.net/ 效果CSDN 语法3（自动链接） 1&lt;https://github.com/&gt; 效果3 https://github.com/ 其他斜体 语法 12*斜体*_斜体_ 效果 斜体 斜体 加粗 语法 12**加粗**__加粗__ 效果 加粗 加粗 下划线 语法 1&lt;u&gt;下划线&lt;/u&gt; 效果 下划线 删除线 语法 1删除线 效果 删除线 分隔线 语法 123***---___ 效果 注脚 语法 12Typora[^1][^1]A markdown editor 效果 Typora[^1] 上下标 语法 1234$3^2=9$$3^&#123;(3-1)&#125;=9$$H_2SO_4$$H_&#123;2SO_4&#125;$ 效果 $3^2=9$ $3^{(3-1)}=9$ $H_2SO_4$ $H_{2SO_4}$ 符号的输入 语法 123456789101112\\ 反斜线\` 反引号\* 星号\_ 底线\&#123; \&#125; 花括号\[ \] 方括号\( \) 括弧\# 井字号\+ 加号\- 减号\. 英文句点\! 惊叹号 效果 \ ` * _ {} [] ( ) # + - . ! 特殊字符 语法 1234567891011121314151617181920&amp;copy; 版权 &amp;reg; 注册商标&amp;trade; 商标&amp;nbsp; 空格&amp;amp; 和号&amp;quot; 引号&amp;apos; 撇号&amp;lt; 小于号&amp;gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;cent; 分&amp;pound; 磅&amp;euro; 欧元&amp;yen; 元&amp;sect; 节&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 正负号 效果 &copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &ge; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; 附: HTML特殊字符编码对照表[传送门]https://www.jb51.net/onlineread/htmlchar.htm]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 教程]]></title>
    <url>%2F2019%2F07%2F28%2FMarkdown-%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[概览Markdown 是一种标记语言（轻量级的、可用纯文本编写）;Markdown 诞生于2004年，由约翰·格鲁伯（John Gruber）创建；Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式。Markdown 编写的文档后缀为 .md, .markdown。 宗旨Markdown 的目标是实现「易读易写」。 应用Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 编辑器Markdown编辑器目前颇多，可参考以下链接进行选择。 [传送门] https://blog.csdn.net/qq_36759224/article/details/82229243 区块元素段落和换行Markdown段落由一个或多个连续的文本行组成。Markdown换行由两个及已上的空格加回车实现。 标题Markdown 支持两种标题的语法，类Setext 和 Atx形式。 使用 = 和 - 标记一级和二级标题（类Setext）12345我展示的是一级标题=================我展示的是二级标题----------------- 注：任何数量的 = 和 - 都可以有效果。 使用 # 号标记 1-6 级标题（类Atx）123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 区块引用 BlockquotesMarkdown 标记区块引用是在每行的最前面加上 &gt; ，如下： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. 或在整个段落的第一行最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345 This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 12345678&gt; ## 这是一个标题。&gt; &gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 列表Markdown支持有序列表和无序列表。 无序列表无序列表使用星号、加号或是减号作为列表标记： 123* 无序列表+ 无序列表- 无序列表 有序列表有序列表则使用数字接着一个英文句点，然后加至少一个空格： 1231. Bird2. McHale3. Parish 注：列表上的数字不会影响输出的 HTML 结果 代码区块 Markdown 实现代码区块只要简单地缩进 4 个空格或是 1 个制表符就可以； 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体。 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号。 分割线在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 123***---___ 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的title文字，只要在网址后面，用双引号把title文字包起来即可 12This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. 参考式在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： 1This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[id]: http://example.com/ "Optional Title Here" 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： 1[Google][] 然后定义链接内容： 1[Google]: http://google.com/ 注：链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号。 1234*single asterisks*_single underscores_**double asterisks**__double underscores__ 注：用什么符号开启标签，就要用什么符号结束，强调可以出现在文字中间，但如果*和_两边都有空白的话，它们将被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： 1\*this text is surrounded by literal asterisks\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： 1Use the `printf()` function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： 1``There is a literal backtick (`) here.`` 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： 123A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` `` 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式12![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式1![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 1[id]: url/to/image "Optional title attribute" 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的&lt;img&gt; 标签。 其它反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠： 1\*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 1&lt;http://example.com/&gt; Markdown 会转为： 1&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt; 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： 1&lt;address@example.com&gt; Markdown 会转成： 1234&lt;a href="mailto:address@example.com"&gt;address@example.com&lt;/a&gt; 在浏览器里面，这段字串（其实是 &lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;）会变成一个可以点击的「address@example.com」链接。 感谢http://www.markdown.cn/#acknowledgement]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
