<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python datetime module]]></title>
    <url>%2F2019%2F08%2F01%2Fpython-python-datetime-module%2F</url>
    <content type="text"><![CDATA[Introductiondatetime Basic date and time types Source code: Lib/datetime.py The datetime module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation. For related functionality, see also the time and calendar modules. datetime include constants and available types 123&gt;&gt;&gt; import datetime&gt;&gt;&gt; dir(datetime)[&apos;MAXYEAR&apos;, &apos;MINYEAR&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;date&apos;, &apos;datetime&apos;, &apos;datetime_CAPI&apos;, &apos;sys&apos;, &apos;time&apos;, &apos;timedelta&apos;, &apos;timezone&apos;, &apos;tzinfo&apos;] The datetime module constantsdatetime.MINYEARThe smallest year number allowed in a date or datetime object. MINYEAR is 1. datatime.MAXYEARThe largest year number allowed in a date or datetime object. MAXYEAR is 9999. The datetime module available typesclass datetime.timedeltaA duration expressing the difference between two date, time, or datetime instances to microsecond resolution. class datetime.dateAn idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: year, month, and day. class datetime.timeAn idealized time, independent of any particular day, assuming that every day has exactly 246060 seconds (there is no notion of “leap seconds” here). Attributes: hour, minute, second, microsecond, and tzinfo. class datetime.datetimeA combination of a date and a time. Attributes: year, month, day, hour, minute, second, microsecond, and tzinfo. class datetime.tzinfoAn abstract base class for time zone information objects. These are used by the datetime and time classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time). class datetime.timezoneA class that implements the tzinfo abstract base class as a fixed offset from the UTC. timedelta ObjectsA timedelta object represents a duration, the difference between two dates or times. 1class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) All arguments are optional and default to 0. Arguments may be integers or floats, and may be positive or negative. Only days, seconds and microseconds are stored internally. Arguments are converted to those units: A millisecond is converted to 1000 microseconds. A minute is converted to 60 seconds. An hour is converted to 3600 seconds. A week is converted to 7 days. days, seconds and microseconds are then normalized so that the representation is unique, with 0 &lt;= microseconds &lt; 1000000 0 &lt;= seconds &lt; 3600*24 (the number of seconds in one day) -999999999 &lt;= days &lt;= 999999999 1234&gt;&gt;&gt; from datetime import timedelta &gt;&gt;&gt; dir(timedelta)[&apos;__abs__&apos;, &apos;__add__&apos;, &apos;__bool__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__divmod__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__floordiv__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__mod__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__neg__&apos;, &apos;__new__&apos;, &apos;__pos__&apos;, &apos;__radd__&apos;, &apos;__rdivmod__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rfloordiv__&apos;, &apos;__rmod__&apos;, &apos;__rmul__&apos;, &apos;__rsub__&apos;, &apos;__rtruediv__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__sub__&apos;, &apos;__subclasshook__&apos;, &apos;__truediv__&apos;, &apos;days&apos;, &apos;max&apos;, &apos;microseconds&apos;, &apos;min&apos;, &apos;resolution&apos;, &apos;seconds&apos;, &apos;total_seconds&apos;] Class attributestimedelta.minThe most negative timedelta object, timedelta(-999999999). 12&gt;&gt;&gt; timedelta.min datetime.timedelta(days=-999999999) timedelta.maxThe most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999). 12&gt;&gt;&gt; timedelta.max datetime.timedelta(days=999999999, seconds=86399, microseconds=999999) timedelta.resolutionThe smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1). 12&gt;&gt;&gt; timedelta.resolution datetime.timedelta(microseconds=1) Instance attributes (read-only)timedelta.daystimedelta.secondstimedelta.microseconds Attribute Value days Between -999999999 and 999999999 inclusive seconds Between 0 and 86399 inclusive microseconds Between 0 and 999999 inclusive 1234&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; d = timedelta(days=1,seconds=1,microseconds=1) &gt;&gt;&gt; (d.days, d.seconds, d.microseconds)(1, 1, 1) Instance methodstimedelta.total_seconds()Return the total number of seconds contained in the duration. Equivalent to td / timedelta(seconds=1). For interval units other than seconds, use the division form directly (e.g. td / timedelta(microseconds=1)). Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy. Example usage: 1234567891011121314151617181920&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; year = timedelta(days=365)&gt;&gt;&gt; another_year = timedelta(weeks=40, days=84, hours=23, minutes=50, seconds=600)&gt;&gt;&gt; year.total_seconds()31536000.0&gt;&gt;&gt; year == another_yearTrue&gt;&gt;&gt; ten_years = 10 * year&gt;&gt;&gt; ten_yearsdatetime.timedelta(3650)&gt;&gt;&gt; ten_years, ten_years.days // 365(datetime.timedelta(3650), 10)&gt;&gt;&gt; nine_years = ten_years - year&gt;&gt;&gt; nine_years, nine_years.days // 365(datetime.timedelta(3285), 9)&gt;&gt;&gt; three_years = nine_years // 3&gt;&gt;&gt; three_years, three_years.days // 365(datetime.timedelta(1095), 3)&gt;&gt;&gt; abs(three_years - ten_years) == 2 * three_years + yearTrue Supported operations123456789101112131415161718192021222324252627282930&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; t1 = timedelta(days=1,seconds=1,microseconds=1) &gt;&gt;&gt; t2 = timedelta(days=2,seconds=2,microseconds=2) &gt;&gt;&gt; t1 + t2 datetime.timedelta(days=3, seconds=3, microseconds=3)&gt;&gt;&gt; t2 - t1 datetime.timedelta(days=1, seconds=1, microseconds=1)&gt;&gt;&gt; t1 - t2 datetime.timedelta(days=-2, seconds=86398, microseconds=999999)&gt;&gt;&gt; 6 * t1 datetime.timedelta(days=6, seconds=6, microseconds=6)&gt;&gt;&gt; 6.6 * t1 datetime.timedelta(days=6, seconds=51846, microseconds=600007)&gt;&gt;&gt; abs(t1) datetime.timedelta(days=1, seconds=1, microseconds=1)&gt;&gt;&gt; abs(t1 - t2)datetime.timedelta(days=1, seconds=1, microseconds=1)# equivalent to +t when t.days &gt;= 0, and to -t when t.days &lt; 0. (2)&gt;&gt;&gt; str(t1) &apos;1 day, 0:00:01.000001&apos;# Returns a string in the form [D day[s], ][H]H:MM:SS[.UUUUUU], where D is negative for negative t. (5)&gt;&gt;&gt; repr(t1) &apos;datetime.timedelta(days=1, seconds=1, microseconds=1)&apos;# Returns a string representation of the timedelta object as a constructor call with canonical attribute values. In addition to the operations listed above timedelta objects support certain additions and subtractions with date and datetime objects . date ObjectsA date object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions. January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on. 1class datetime.date(year, month, day) All arguments are required. Arguments may be integers, in the following ranges: MINYEAR &lt;= year &lt;= MAXYEAR 1 &lt;= month &lt;= 12 1 &lt;= day &lt;= number of days in the given month and year If an argument outside those ranges is given, ValueError is raised. 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; dir(date)[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__radd__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rsub__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__sub__&apos;, &apos;__subclasshook__&apos;, &apos;ctime&apos;, &apos;day&apos;, &apos;fromisoformat&apos;, &apos;fromordinal&apos;, &apos;fromtimestamp&apos;, &apos;isocalendar&apos;, &apos;isoformat&apos;, &apos;isoweekday&apos;, &apos;max&apos;, &apos;min&apos;, &apos;month&apos;, &apos;replace&apos;, &apos;resolution&apos;, &apos;strftime&apos;, &apos;timetuple&apos;, &apos;today&apos;, &apos;toordinal&apos;, &apos;weekday&apos;, &apos;year&apos;] Class attributesdate.minThe earliest representable date, date(MINYEAR, 1, 1). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.min datetime.date(1, 1, 1) date.maxThe latest representable date, date(MAXYEAR, 12, 31). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.maxdatetime.date(9999, 12, 31) date.resolutionThe smallest possible difference between non-equal date objects, timedelta(days=1). 1234&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.resolutiondatetime.timedelta(days=1) Instance attributes (read-only)date.yearBetween MINYEAR and MAXYEAR inclusive. date.monthBetween 1 and 12 inclusive. date.dayBetween 1 and the number of days in the given month of the given year. Class methodsdate.today()Return the current local date. This is equivalent to date.fromtimestamp(time.time()). 123&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.today() datetime.date(2019, 8, 3) date.fromtimestamp(timestamp)Return the local date corresponding to the POSIX timestamp, such as is returned by time.time(). 12345&gt;&gt;&gt; import time&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; date.fromtimestamp(time.time()) datetime.date(2019, 8, 3) date.fromordinal(ordinal)Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. ValueError is raised unless 1 &lt;= ordinal &lt;= date.max.toordinal(). For any date d, date.fromordinal(d.toordinal()) == d. 12345678910&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; date.fromordinal(1) datetime.date(1, 1, 1)&gt;&gt;&gt; date.fromordinal(31)datetime.date(1, 1, 31)&gt;&gt;&gt; date.fromordinal(35)datetime.date(1, 2, 4) date.fromisoformat(date_string)Return a date corresponding to a date_string in the format emitted by date.isoformat(). Specifically, this function supports strings in the format(s) YYYY-MM-DD. Caution This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of date.isoformat(). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = &quot;2018-10-10&quot;&gt;&gt;&gt; date.fromisoformat(d) datetime.date(2018, 10, 10) Instance methodsdate.replace(year=self.year, month=self.month, day=self.day)Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified. For example 12345678&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10) &gt;&gt;&gt; d.replace(month=12)datetime.date(2018, 12, 10)&gt;&gt;&gt; d.replace(month=12) == date(2018, 12, 10) True date.timetuple()Return a time.struct_time such as returned by time.localtime(). The hours, minutes and seconds are 0, and the DST flag is -1. d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1)), where yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1 is the day number within the current year starting with 1 for January 1st. 12345&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.timetuple() time.struct_time(tm_year=2018, tm_mon=10, tm_mday=10, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=283, tm_isdst=-1) date.toordinal()Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any date object d, date.fromordinal(d.toordinal()) == d. 12345678&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.toordinal() 736977&gt;&gt;&gt; date.fromordinal(d.toordinal()) == dTrue date.weekday()Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example,date(2018, 10, 10).weekday() == 2, a Wednesday. 12345&gt;&gt;&gt; from datetime import date &gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.weekday() 2 # is Wednesday date.isoweekday()Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example,date(2018, 10, 10).isoweekday() == 3, a Wednesday 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.isoweekday()3 # is Wednesday date.isocalendar()Return a 3-tuple, (ISO year, ISO week number, ISO weekday). The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year. For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that date(2003, 12, 29).isocalendar() == (2004, 1, 1) and date(2004, 1, 4).isocalendar() == (2004, 1, 7). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2004, 1, 1)&gt;&gt;&gt; d.isocalendar()(2004, 1, 4) date.isoformat()Return a string representing the date in ISO 8601 format, ‘YYYY-MM-DD’. For example 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.isoformat() &apos;2018-10-10&apos; date.__str__()For a date d, str(d) is equivalent to d.isoformat(). 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; str(d)&apos;2018-10-10&apos; date.ctime()Return a string representing the date, is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime() function (which time.ctime() invokes, but which date.ctime() does not invoke) conforms to the C standard. 12345&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.ctime() &apos;Wed Oct 10 00:00:00 2018&apos; date.strftime(format)Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values 1234567&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; d = date(2018, 10, 10)&gt;&gt;&gt; d.strftime(&apos;%Y-%m-%d&apos;) &apos;2018-10-10&apos;&gt;&gt;&gt; d.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)&apos;2018-10-10 00:00:00&apos; date.__format__(format)Same as date.strftime(). This makes it possible to specify a format string for a date object in formatted string literals and when using str.format(). Supported operations1234567891011121314151617181920&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; d1 = date(2018, 10, 10) &gt;&gt;&gt; d2 = date(2019, 11, 11)&gt;&gt;&gt; day = timedelta(days=15)&gt;&gt;&gt; d2 - d1datetime.timedelta(days=397)&gt;&gt;&gt; d1 - d2 datetime.timedelta(days=-397)&gt;&gt;&gt; d1 &lt; d2True&gt;&gt;&gt; d1 + day datetime.date(2018, 10, 25)&gt;&gt;&gt; d2 - day datetime.date(2019, 10, 27) time ObjectsA time object represents a (local) time of day, independent of any particular day, and subject to adjustment via a tzinfo object. 1class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be integers, in the following ranges: 0 &lt;= hour &lt; 24, 0 &lt;= minute &lt; 60, 0 &lt;= second &lt; 60, 0 &lt;= microsecond &lt; 1000000, fold in [0, 1]. If an argument outside those ranges is given,ValueError is raised. All default to 0 except tzinfo, which defaults to None. 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; dir(time)[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;dst&apos;, &apos;fold&apos;, &apos;fromisoformat&apos;, &apos;hour&apos;, &apos;isoformat&apos;, &apos;max&apos;, &apos;microsecond&apos;, &apos;min&apos;, &apos;minute&apos;, &apos;replace&apos;, &apos;resolution&apos;, &apos;second&apos;, &apos;strftime&apos;, &apos;tzinfo&apos;, &apos;tzname&apos;, &apos;utcoffset&apos;] Class attributestime.minThe earliest representable time, time(0, 0, 0, 0). 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.min datetime.time(0, 0) time.maxThe latest representable time, time(23, 59, 59, 999999). 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.max datetime.time(23, 59, 59, 999999) time.resolutionThe smallest possible difference between non-equal time objects, timedelta(microseconds=1), although note that arithmetic on time objects is not supported. 1234&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; time.resolution datetime.timedelta(microseconds=1) Instance attributestime.hourIn range(24). time.minuteIn range(60). time.secondIn range(60). time.microsecondIn range(1000000). time.tzinfoThe object passed as the tzinfo argument to the time constructor, or None if none was passed. time.foleIn [0, 1]. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation. 12345&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; t = time(10, 23, 56)&gt;&gt;&gt; t.hour, t.minute, t.second, t.microsecond, t.tzinfo, t.fold (10, 23, 56, 0, None, 0) Class methodstime.fromisoformat(time_sting)Return a time corresponding to a time_string in one of the formats emitted by time.isoformat(). Specifically, this function supports strings in the format(s) HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]. Instance methodstime.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)Return a time with the same value, except for those attributes given new values by whichever keyword arguments are specified. Note that tzinfo=None can be specified to create a naive time from an aware time, without conversion of the time data. New in version 3.6: Added the fold argument. time.isoformat(timespec=’auto’)Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if microsecond is 0, HH:MM:SS If utcoffset() does not return None, a string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]]. The optional argument timespec specifies the number of additional components of the time to include (the default is ‘auto’). It can be one of the following: ‘auto’: Same as ‘seconds’ if microsecond is 0, same as ‘microseconds’ otherwise. ‘hours’: Include the hour in the two-digit HH format. ‘minutes’: Include hour and minute in HH:MM format. ‘seconds’: Include hour, minute, and second in HH:MM:SS format. ‘milliseconds’: Include full time, but truncate fractional second part to milliseconds. HH:MM:SS.sss format. ‘microseconds’: Include full time in HH:MM:SS.ffffff format. ValueError will be raised on an invalid timespec argument. 12345678910111213&gt;&gt;&gt; from datetime import time &gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=123456) &gt;&gt;&gt; t.isoformat() &apos;12:34:56.123456&apos;&gt;&gt;&gt; t.isoformat(timespec=&apos;minutes&apos;) &apos;12:34&apos;&gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=0) &gt;&gt;&gt; t.isoformat(timespec=&apos;microseconds&apos;) &apos;12:34:56.000000&apos;&gt;&gt;&gt; t.isoformat(timespec=&apos;auto&apos;) &apos;12:34:56&apos; time.str()For a time t, str(t) is equivalent to t.isoformat(). time.strftime(format)Return a string representing the time, controlled by an explicit format string. 12345&gt;&gt;&gt; from datetime import time&gt;&gt;&gt; t = time(hour=12, minute=34, second=56, microsecond=0)&gt;&gt;&gt; t.strftime(&apos;%H:%M:%S&apos;) &apos;12:34:56&apos; time.__format__(format)Same as time.strftime(). This makes it possible to specify a format string for a time object in formatted string literals and when using str.format(). time.utcoffset()If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(None), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes. time.dst()If tzinfo is None, returns None, else returns self.tzinfo.dst(None), and raises an exception if the latter doesn’t return None, or a timedelta object with magnitude less than one day. Changed in version 3.7: The DST offset is not restricted to a whole number of minutes. time.tzname()If tzinfo is None, returns None, else returns self.tzinfo.tzname(None), or raises an exception if the latter doesn’t return None or a string object. 123456789101112131415161718192021222324&gt;&gt;&gt; from datetime import time, tzinfo, timedelta&gt;&gt;&gt; class TZ1(tzinfo):... def utcoffset(self, dt):... return timedelta(hours=1)... def dst(self, dt):... return timedelta(0)... def tzname(self,dt):... return &quot;+01:00&quot;... def __repr__(self):... return f&quot;&#123;self.__class__.__name__&#125;()&quot;...&gt;&gt;&gt; t = time(12, 10, 30, tzinfo=TZ1())&gt;&gt;&gt; tdatetime.time(12, 10, 30, tzinfo=TZ1())&gt;&gt;&gt; t.isoformat()&apos;12:10:30+01:00&apos;&gt;&gt;&gt; t.dst()datetime.timedelta(0)&gt;&gt;&gt; t.tzname()&apos;+01:00&apos;&gt;&gt;&gt; t.strftime(&quot;%H:%M:%S %Z&quot;)&apos;12:10:30 +01:00&apos;&gt;&gt;&gt; &apos;The &#123;&#125; is &#123;:%H:%M&#125;.&apos;.format(&quot;time&quot;, t)&apos;The time is 12:10.&apos; datetime ObjectsClass attributesInstance attributesClass methodsInstance methodstzinfo ObjectsClass attributesInstance attributesClass methodsInstance methodstimezone ObjectsClass attributesInstance attributesClass methodsInstance methods]]></content>
      <categories>
        <category>python</category>
        <category>module</category>
        <category>datetime</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>datetime</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 安装ssh以及ssh用法与免密登录]]></title>
    <url>%2F2019%2F07%2F31%2Flinux-%E5%AE%89%E8%A3%85ssh%E4%BB%A5%E5%8F%8Assh%E7%94%A8%E6%B3%95%E4%B8%8E%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[ssh 简述SSH ( Secure Shell) 由 IETF 的网络工作小组（Network Working Group）所制定； SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。其是建立在应用层和传输层基础上的安全协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。 SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。 SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。 ssh 安装命令： yum install -y openssh-server openssh-clients 启动ssh： service sshd start 或 /etc/init.d/sshd start 配置开机启动： chkconfig –level 2345 sshd on 配置hosts文件编辑 /etc/hosts文件，在文件尾部添加： ​ IP hostname ​ 例： ​ 192.168.10.10 linux ssh免密登录生成密钥命令：ssh-keygen -t rsa 注：上述操作后一路回车，生成之后会在用户的根目录生成一个 “.ssh”的文件夹。 123456789101112131415161718192021[root@hadoop-centos-01 bin]# ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:cvRFrezrrpzUxZiHr7oufeyNJZGRimjVd1QV7TYTF9c root@hadoop-centos-01The key&apos;s randomart image is:+---[RSA 2048]----+| ...+X|| . . o..E|| o ..=...o|| + o +oO oo|| + S o.* +.o|| . o ..= || ...o.o || .o..+* || oBO* . |+----[SHA256]-----+ 12[root@hadoop-centos-01 opt]# cd ; ll -al | grep .sshdrwx------. 2 root root 80 May 12 22:25 .ssh .ssh 目录包含文件： 123456[root@hadoop-centos-01 .ssh]# ll -ltotal 16-rw-------. 1 root root 1613 May 12 22:30 authorized_keys-rw-------. 1 root root 1675 Aug 1 07:37 id_rsa-rw-r--r--. 1 root root 403 Aug 1 07:37 id_rsa.pub-rw-r--r--. 1 root root 919 May 13 06:54 known_hosts authorized_keys: 存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥 id_rsa : 生成的私钥文件 id_rsa.pub ： 生成的公钥文件 know_hosts : 已知的主机公钥清单 注： ​ 如果希望ssh公钥生效需满足至少下面两个条件： 1) .ssh目录的权限必须是700 2) .ssh/authorized_keys文件权限必须是600 设置免密登录通过ssh-copy-id的方式命令： ssh-copy-id -i ~/.ssh/id_rsa.pub [ip/hosts] 通过scp将内容写到对方的文件中命令：scp -p ~/.ssh/id_rsa.pub root@:/root/.ssh/authorized_keys]]></content>
      <categories>
        <category>Linux</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>command</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora简单教程]]></title>
    <url>%2F2019%2F07%2F29%2FTypora%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[序言Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。 基本操作内容目录 语法 1[toc] 标题 语法 123456# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 引用 语法 123&gt; 引用内容1&gt; 引用内容2&gt;&gt; 引用内容3 效果 引用内容1 引用内容2 引用内容3 代码单行代码 语法 1`String str1 = &quot;hello&quot;;` 效果 string str1 = &quot;hello world&quot;; 多行代码 语法 1~~~ Language 效果 12int a = 10;int b = 20; 列表无序列表 语法 123* 无序列表1+ 无序列表2- 无序列表3 效果 无序列表1 无序列表2 无序列表3 多行无需列表 语法 123* 多行无序列表1TAB * 多行无序列表2TAB TAB * 多行无序列表3 效果 多行无序列表1 多行无序列表2 多行无序列表3 有序列表 语法 1231. 有序列表12. 有序列表23. 有序列表3 效果 有序列表1 有序列表2 有序列表3 多行有序列表 语法 12345671. 多行有序列表12. 多行有序列表2 1. 多行有序列表2-1 2. 多行有序列表2-23. 多行有序列表3 1. 多行有序列表3-1 2. 多行有序列表3-2 效果 多行有序列表1 多行有序列表2 多行有序列表2-1 多行有序列表2-2 多行有序列表3 多行有序列表3-1 多行有序列表3-2 任务列表 语法 123-[ ] 抽烟-[x] 喝酒-[ ] 烫头 效果 -[ ] 抽烟-[x] 喝酒-[ ] 烫头 表格 语法 12345|姓名|性别|年龄|手机号||:---|:--:|:--:|---:||张三|男|21|18975346876||李四|女|23|17789548964||王五|男|25|15876513546| 效果 姓名 性别 年龄 手机号 张三 男 21 18975346876 李四 女 23 17789548964 王五 男 25 15876513546 链接图片 语法1（本地图片） 1[图片上传失败...(image-61fd19-1520850984854)] 语法2（网络图片） 1![typora.jpg(https://uploadimages.jianshu.io/upload_images/1538862d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 超链接 语法1（行内式链接） 12[百度][https://www.baidu.com/][百度](https://www.baidu.com/) 效果 [百度][https://www.baidu.com/ ]百度 语法2（参考式链接） 12[CSDN][CSDN网址][CSDN网址]:https://www.csdn.net/ 效果CSDN 语法3（自动链接） 1&lt;https://github.com/&gt; 效果3 https://github.com/ 其他斜体 语法 12*斜体*_斜体_ 效果 斜体 斜体 加粗 语法 12**加粗**__加粗__ 效果 加粗 加粗 下划线 语法 1&lt;u&gt;下划线&lt;/u&gt; 效果 下划线 删除线 语法 1删除线 效果 删除线 分隔线 语法 123***---___ 效果 注脚 语法 12Typora[^1][^1]A markdown editor 效果 Typora[^1] 上下标 语法 1234$3^2=9$$3^&#123;(3-1)&#125;=9$$H_2SO_4$$H_&#123;2SO_4&#125;$ 效果 $3^2=9$ $3^{(3-1)}=9$ $H_2SO_4$ $H_{2SO_4}$ 符号的输入 语法 123456789101112\\ 反斜线\` 反引号\* 星号\_ 底线\&#123; \&#125; 花括号\[ \] 方括号\( \) 括弧\# 井字号\+ 加号\- 减号\. 英文句点\! 惊叹号 效果 \ ` * _ {} [] ( ) # + - . ! 特殊字符 语法 1234567891011121314151617181920&amp;copy; 版权 &amp;reg; 注册商标&amp;trade; 商标&amp;nbsp; 空格&amp;amp; 和号&amp;quot; 引号&amp;apos; 撇号&amp;lt; 小于号&amp;gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;cent; 分&amp;pound; 磅&amp;euro; 欧元&amp;yen; 元&amp;sect; 节&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 正负号 效果 &copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &ge; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; 附: HTML特殊字符编码对照表[传送门]https://www.jb51.net/onlineread/htmlchar.htm]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 教程]]></title>
    <url>%2F2019%2F07%2F28%2FMarkdown-%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[概览Markdown 是一种标记语言（轻量级的、可用纯文本编写）;Markdown 诞生于2004年，由约翰·格鲁伯（John Gruber）创建；Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式。Markdown 编写的文档后缀为 .md, .markdown。 宗旨Markdown 的目标是实现「易读易写」。 应用Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 编辑器Markdown编辑器目前颇多，可参考以下链接进行选择。 [传送门] https://blog.csdn.net/qq_36759224/article/details/82229243 区块元素段落和换行Markdown段落由一个或多个连续的文本行组成。Markdown换行由两个及已上的空格加回车实现。 标题Markdown 支持两种标题的语法，类Setext 和 Atx形式。 使用 = 和 - 标记一级和二级标题（类Setext）12345我展示的是一级标题=================我展示的是二级标题----------------- 注：任何数量的 = 和 - 都可以有效果。 使用 # 号标记 1-6 级标题（类Atx）123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 区块引用 BlockquotesMarkdown 标记区块引用是在每行的最前面加上 &gt; ，如下： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. 或在整个段落的第一行最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345 This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 12345678&gt; ## 这是一个标题。&gt; &gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 列表Markdown支持有序列表和无序列表。 无序列表无序列表使用星号、加号或是减号作为列表标记： 123* 无序列表+ 无序列表- 无序列表 有序列表有序列表则使用数字接着一个英文句点，然后加至少一个空格： 1231. Bird2. McHale3. Parish 注：列表上的数字不会影响输出的 HTML 结果 代码区块 Markdown 实现代码区块只要简单地缩进 4 个空格或是 1 个制表符就可以； 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体。 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号。 分割线在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 123***---___ 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的title文字，只要在网址后面，用双引号把title文字包起来即可 12This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. 参考式在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： 1This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[id]: http://example.com/ "Optional Title Here" 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： 1[Google][] 然后定义链接内容： 1[Google]: http://google.com/ 注：链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号。 1234*single asterisks*_single underscores_**double asterisks**__double underscores__ 注：用什么符号开启标签，就要用什么符号结束，强调可以出现在文字中间，但如果*和_两边都有空白的话，它们将被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： 1\*this text is surrounded by literal asterisks\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： 1Use the `printf()` function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： 1``There is a literal backtick (`) here.`` 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： 123A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` `` 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式12![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式1![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 1[id]: url/to/image "Optional title attribute" 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的&lt;img&gt; 标签。 其它反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠： 1\*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 1&lt;http://example.com/&gt; Markdown 会转为： 1&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt; 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： 1&lt;address@example.com&gt; Markdown 会转成： 1234&lt;a href="mailto:address@example.com"&gt;address@example.com&lt;/a&gt; 在浏览器里面，这段字串（其实是 &lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;）会变成一个可以点击的「address@example.com」链接。 感谢http://www.markdown.cn/#acknowledgement]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
